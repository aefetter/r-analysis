---
title: "political-satire-r-charts"
author: "Anna Fetter"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
library(tidyverse)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
library(hms)
library(readr)
library(readxl)
```

### Step 1. Read in the data
```{r}
snl_airtime <- read_csv("data/snl-airtime.csv")
View(snl_airtime)
```

```{r}
#read in other chart for topic analysis
snl_topics <- read_excel("data/SNL-topics.xlsx")
View(snl_topics)
```

```{r}
class(snl_airtime$`harris air time stamps`)
```

```{r}
# cleaning the data to capture total airtime for Trump & Harris

# Function to calculate duration from timestamp ranges
calculate_duration <- function(time_range) {
  if (is.na(time_range) || time_range == "none" || time_range == "") return(0)
  
  # Process multiple ranges separated by "and"
  ranges <- unlist(strsplit(time_range, " and "))
  total_seconds <- 0
  
  for (range in ranges) {
    # Split start and end times
    times <- unlist(strsplit(range, "-"))
    if (length(times) != 2) next
    
    # Convert start time to seconds
    start_parts <- as.numeric(unlist(strsplit(times[1], ":")))
    start_seconds <- if (length(start_parts) == 2) start_parts[1] * 60 + start_parts[2] else start_parts[1]
    
    # Convert end time to seconds
    end_parts <- as.numeric(unlist(strsplit(times[2], ":")))
    end_seconds <- if (length(end_parts) == 2) end_parts[1] * 60 + end_parts[2] else end_parts[1]
    
    # Add duration to total
    total_seconds <- total_seconds + (end_seconds - start_seconds)
  }
  
  return(total_seconds)
}

# Function to process timestamps into a dataframe of start and end times
process_timestamps <- function(timestamps, candidate) {
  if (is.na(timestamps) || timestamps == "none" || timestamps == "") {
    # Return an empty dataframe with the correct structure
    return(data.frame(start = numeric(0), end = numeric(0), candidate = character(0)))
  }
  
  # Split the timestamps by "and" to handle multiple ranges
  ranges <- unlist(strsplit(timestamps, " and "))
  segments <- data.frame()
  
  for (range in ranges) {
    # Split each range into start and end times
    times <- unlist(strsplit(range, "-"))
    if (length(times) != 2) next
    
    # Convert start and end times to seconds
    start_parts <- as.numeric(unlist(strsplit(times[1], ":")))
    start_seconds <- if (length(start_parts) == 2) start_parts[1] * 60 + start_parts[2] else start_parts[1]
    
    end_parts <- as.numeric(unlist(strsplit(times[2], ":")))
    end_seconds <- if (length(end_parts) == 2) end_parts[1] * 60 + end_parts[2] else end_parts[1]
    
    # Add the segment to the dataframe
    segment <- data.frame(
      start = start_seconds,
      end = end_seconds,
      candidate = candidate
    )
    segments <- rbind(segments, segment)
  }
  
  return(segments)
}
```

### Step 2. Add a few more charts for total airtime
```{r}
# Create expanded dataset with duration calculations while keeping original data
snl_airtime_processed <- snl_airtime %>% 
  mutate(
    # Calculate total airtime in seconds
    total_trump_airtime_seconds = sapply(`trump air time stamps`, calculate_duration),
    total_harris_airtime_seconds = sapply(`harris air time stamps`, calculate_duration),
    
    # Convert to minutes for easier interpretation
    total_trump_airtime_minutes = round(total_trump_airtime_seconds / 60, 2),
    total_harris_airtime_minutes = round(total_harris_airtime_seconds / 60, 2)
  )
```

```{r}
# Update the processed dataframe to correctly parse "run time (total)" as MM:SS
snl_airtime_processed <- snl_airtime_processed %>%
  mutate(
    # Convert "run time (total)" from MM:SS to total seconds
    episode_length_seconds = sapply(`run time (total)`, function(runtime) {
      time_parts <- unlist(strsplit(as.character(runtime), ":"))
      as.numeric(time_parts[1]) * 60 + as.numeric(time_parts[2])
    })
  )
```

### Step 3. Create a cool data visualization to show the airtime for each candidate for one episode

```{r}
# Example: Process the first episode
first_episode <- snl_airtime_processed[1, ]  # Get the first episode
episode_title <- first_episode$show
episode_length <- first_episode$episode_length_seconds  # Use the parsed episode length

# Process Trump and Harris airtime
trump_segments <- process_timestamps(first_episode$`trump air time stamps`, "Trump")
harris_segments <- process_timestamps(first_episode$`harris air time stamps`, "Harris")

# Combine the segments into one dataframe
all_segments <- rbind(trump_segments, harris_segments)

# Create the visualization
airtime_per_candidate_vis <- ggplot() +
  # Draw the full episode bar (grey)
  geom_rect(aes(xmin = 0, xmax = episode_length, ymin = 0, ymax = 1), fill = "grey90", color = "black", size = 0.3) +
  
  # Highlight Trump's airtime (top half of the bar)
  geom_rect(
    data = filter(all_segments, candidate == "Trump"),
    aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1),
    fill = "red", alpha = 0.8
  ) +
  
  # Highlight Harris's airtime (bottom half of the bar)
  geom_rect(
    data = filter(all_segments, candidate == "Harris"),
    aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5),
    fill = "blue", alpha = 0.8
  ) +
  
  # Add tick marks for every minute and every 15 seconds
  scale_x_continuous(
    breaks = seq(0, episode_length, by = 60),  # Tick marks every minute
    minor_breaks = seq(0, episode_length, by = 15),  # Minor tick marks every 15 seconds
    labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)  # Format as mm:ss
  ) +
  
  # Add labels and theme
  labs(
    title = paste(episode_title),
    subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
    x = "Time (minutes:seconds)",
    y = NULL
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_line(color = "grey80", size = 0.3),
    panel.grid.minor.x = element_line(color = "grey90", size = 0.2),
    plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
    plot.subtitle = element_text(size = 12, hjust = 0.5),
    axis.text.x = element_text(size = 10, color = "black")
  )

# Print the visualization
airtime_per_candidate_vis
```

#Step 4. Make this chart for every SNL episode in the database. Make it so it can fit on one sheet
```{r}
# Step 1: Process all episodes
all_segments <- data.frame(
  start = numeric(0),
  end = numeric(0), 
  candidate = character(0),
  episode = character(0),
  stringsAsFactors = FALSE
)

for (i in 1:nrow(snl_airtime_processed)) {
  episode <- snl_airtime_processed[i, ]
  episode_title <- as.character(episode$show)
  episode_length <- episode$episode_length_seconds
  
  # Process Trump and Harris airtime
  trump_segments <- process_timestamps(episode$`trump air time stamps`, "Trump")
  harris_segments <- process_timestamps(episode$`harris air time stamps`, "Harris")
  
  # Add episode title to each segment
  if (nrow(trump_segments) > 0) {
    trump_segments$episode <- episode_title
    all_segments <- rbind(all_segments, trump_segments)
  }
  
  if (nrow(harris_segments) > 0) {
    harris_segments$episode <- episode_title
    all_segments <- rbind(all_segments, harris_segments)
  }
}

# Verify we have data in all_segments
print(paste("Number of rows in all_segments:", nrow(all_segments)))
print(head(all_segments))

# Check for any episodes with no segments
episodes_with_segments <- unique(all_segments$episode)
all_episodes <- unique(snl_airtime_processed$show)
missing_episodes <- setdiff(all_episodes, episodes_with_segments)
print(paste("Episodes with no segments:", paste(missing_episodes, collapse=", ")))

# Create a data frame for grey bars with exactly the same episode names
episode_bars <- snl_airtime_processed %>%
  select(show, episode_length_seconds) %>%
  rename(episode = show)

# Step 2: Create the faceted visualization with debugging - FIXED VERSION
all_episodes_vis <- ggplot() +
  # Draw the full episode bar (grey) for all episodes
  geom_rect(
    data = episode_bars,
    aes(xmin = 0, xmax = episode_length_seconds, ymin = 0, ymax = 1, group = episode),
    fill = "grey90", color = "black", size = 0.3
  ) +
  
  # Add Trump segments with more explicit mapping
  geom_rect(
    data = filter(all_segments, candidate == "Trump"),
    aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1, group = episode),
    fill = "red", color = "darkred", alpha = 0.8, size = 0.5
  ) +
  
  # Add Harris segments with more explicit mapping
  geom_rect(
    data = filter(all_segments, candidate == "Harris"),
    aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5, group = episode),
    fill = "blue", color = "darkblue", alpha = 0.8, size = 0.5
  ) +
  
  # Add tick marks - keep scales consistent
  scale_x_continuous(
    breaks = seq(0, max(episode_bars$episode_length_seconds), by = 60),
    minor_breaks = seq(0, max(episode_bars$episode_length_seconds), by = 15),
    labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)
  ) +
  
  # Force a more explicit interaction between facets and data
  facet_wrap(~ episode, ncol = 1, scales = "free_x", drop = FALSE) +
  
  # Rest of your code stays the same
  labs(
    title = "SNL Airtime Visualization for All Episodes",
    subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
    x = "Time (minutes:seconds)",
    y = NULL
  ) +
  theme_minimal() +
  theme(
    strip.text = element_text(face = "bold", size = 10),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_line(color = "grey80", size = 0.3),
    panel.grid.minor.x = element_line(color = "grey90", size = 0.2),
    plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
    plot.subtitle = element_text(size = 12, hjust = 0.5),
    axis.text.x = element_text(size = 10, color = "black")
  )

# Step 3: Print the visualization
print(all_episodes_vis)

ggsave(
  "snl_airtime_faceted.pdf", 
  all_episodes_vis, 
  width = 12, 
  height = 24, 
  limitsize = FALSE
)
```

### Topic analysis
```{r}
#Now we're moving onto topic analysis, we need to clean the data first
# Convert "run time (total)" from POSIXct to seconds and MM:SS, THIS IS BROKEN
snl_topics_processed <- snl_topics %>%
  mutate(
    # Extract minutes and seconds from the POSIXct object
    episode_length_seconds = as.numeric(format(`run time (total)`, "%M")) * 60 +
                             as.numeric(format(`run time (total)`, "%S")),
    
    # Format back to MM:SS for display
    episode_length_formatted = sprintf("%d:%02d", floor(episode_length_seconds / 60), episode_length_seconds %% 60)
  )

#I noticed that the episode length is reading in as a date: fixing so it's run time
str(snl_topics$`run time (total)`)
```

## Cleaning topic analysis into a quantifiable format
```{r}
# step 1. make data quantifiable (ex. direct mentions = True, no direct mentions = False)
snl_topics_processed <- snl_topics %>%
  mutate(across(
    contains(c("reproductive", "immigration", "economics", "democracy")),
    ~ case_when(
        str_detect(., regex("no (direct|mentions|statements)", ignore_case = TRUE)) ~ FALSE,
        is.na(.) ~ NA,
        TRUE ~ TRUE
      ),
    .names = "mentioned_{.col}"
  ))
```


```{r}

#coding on my own to create the heatmap data

snl_heatmap_data <- snl_topics_processed %>% 
  mutate(
    economics = case_when(
      `mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == FALSE ~ "Trump",
      `mentioned_Trump Economics` == FALSE & `mentioned_Harris Economics` == TRUE ~ "Harris",
      `mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == TRUE ~ "Both",
      TRUE ~ "None"  # Default case when neither is TRUE
    ),
    reproductive_rights = case_when(
      `mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == FALSE ~ "Trump",
      `mentioned_Trump reproductive rights` == FALSE & `mentioned_Harris reproductive rights` == TRUE ~ "Harris",
      `mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == TRUE ~ "Both",
      TRUE ~ "None"  # Default case when neither is TRUE
    ),
    immigration = case_when(
      `mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == FALSE ~ "Trump",
      `mentioned_Trump immigration` == FALSE & `mentioned_Harris immigration` == TRUE ~ "Harris",
      `mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == TRUE ~ "Both",
      TRUE ~ "None"  # Default case when neither is TRUE
    ),
    democracy = case_when(
      `mentioned_Trump Democracy` == TRUE & `mentioned_Harris Democracy` == FALSE ~ "Trump",
      `mentioned_Trump Democracy` == FALSE & `mentioned_Harris Democracy` == TRUE ~ "Harris",
      `mentioned_Trump Democracy` == TRUE & `mentioned_Harris Democracy` == TRUE ~ "Both",
      TRUE ~ "None"  # Default case when neither is TRUE
    )
  ) %>% 
  select(show, date, economics, reproductive_rights, immigration, democracy)

head(snl_heatmap_data)
```

```{r}
#creating the heatmap based off SNL heatmap data

# Step 1: Pivot the data to long format
heatmap_long <- snl_heatmap_data %>%
  pivot_longer(
    cols = c(economics, reproductive_rights, immigration, democracy),
    names_to = "topic",
    values_to = "mentioned_by"
  )

# Step 2: Set color palette
mention_colors <- c(
  "Trump" = "red",
  "Harris" = "blue",
  "Both" = "purple",
  "None" = "grey90"
)

# Step 3: Set election day
election_day <- as.Date("2024-11-05")

# Step 4: Plot
heatmap_plot <- ggplot(heatmap_long, aes(x = date, y = fct_rev(topic), fill = mentioned_by)) +
  geom_tile(color = "white", linewidth = 0.5) +
  scale_fill_manual(values = mention_colors, name = "Mentioned By") +
  labs(
    title = "SNL Mentions by Topic and Candidate Over Time",
    x = "Episode Air Date",
    y = "Topic"
  ) +
  scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +  # Nice weekly labels
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid = element_blank()
  ) +
  geom_vline(xintercept = as.Date("2024-11-05"), linetype = "dashed", color = "black")


# Step 5: Print and save
print(heatmap_plot)

ggsave("snl_topic_heatmap_final.png", plot = heatmap_plot, width = 10, height = 6, dpi = 300)

```

```{r}
library(patchwork)  # For combining plots

# First, build labels like: 1 (Oct 01)
snl_heatmap_data <- snl_heatmap_data %>%
  arrange(date) %>%
  mutate(
    ep_num = row_number(),
    ep_label = paste0(ep_num, " (", format(date, "%b %d"), ")")
  )

# Pivot to long format for plotting
heatmap_long <- snl_heatmap_data %>%
  pivot_longer(
    cols = c(economics, reproductive_rights, immigration, democracy),
    names_to = "topic",
    values_to = "mentioned_by"
  )

# Color mapping
mention_colors <- c(
  "Trump" = "red",
  "Harris" = "blue",
  "Both" = "purple",
  "None" = "grey90"
)

# Build the heatmap
heatmap_plot <- ggplot(heatmap_long, aes(x = factor(ep_label, levels = unique(snl_heatmap_data$ep_label)), 
                                         y = fct_rev(topic), fill = mentioned_by)) +
  geom_tile(color = "white", linewidth = 0.5) +
  scale_fill_manual(values = mention_colors, name = "Mentioned By") +
  labs(
    title = "SNL Mentions by Topic and Candidate",
    x = "Episode Number (Air Date)",
    y = "Topic"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid = element_blank()
  ) +
  geom_vline(
    xintercept = which(snl_heatmap_data$date == as.Date("2024-11-05")),
    linetype = "dashed", color = "black"
  )

# Save the final version
ggsave("snl_heatmap_final.png", plot = heatmap_plot, width = 12, height = 6, dpi = 300)

```