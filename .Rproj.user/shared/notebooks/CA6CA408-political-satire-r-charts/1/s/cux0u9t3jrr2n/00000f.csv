"0","#Now we're moving onto topic analysis, we need to clean the data first"
"0",""
"0","#I noticed that the episode length is reading in as a date: fixing so it's run time"
"0","snl_topics_processed <- snl_topics %>%"
"0","  mutate("
"0","    # Convert ""run time (total)"" to seconds"
"0","    episode_length_seconds = sapply(as.character(`run time (total)`), function(runtime) {"
"0","      # Handle missing or invalid values"
"0","      if (is.na(runtime) || runtime == """") {"
"0","        return(NA)"
"0","      }"
"0","      "
"0","      # Split the runtime into parts (MM:SS or HH:MM:SS)"
"0","      time_parts <- unlist(strsplit(runtime, "":""))"
"0","      "
"0","      # Handle MM:SS format"
"0","      if (length(time_parts) == 2) {"
"0","        return(as.numeric(time_parts[1]) * 60 + as.numeric(time_parts[2]))"
"0","      }"
"0","      "
"0","      # Handle HH:MM:SS format"
"0","      if (length(time_parts) == 3) {"
"0","        return(as.numeric(time_parts[1]) * 3600 + as.numeric(time_parts[2]) * 60 + as.numeric(time_parts[3]))"
"0","      }"
"0","      "
"0","      # If the format is invalid, return NA"
"0","      return(NA)"
"0","    }),"
"0","    "
"0","    # Format back to MM:SS for display"
"0","    episode_length_formatted = sprintf(""%d:%02d"", floor(episode_length_seconds / 60), episode_length_seconds %% 60)"
"0","  )"
"2","Warning: [38;5;232mThere were 18 warnings in `mutate()`.
The first warning was:[39m
[38;5;232m[36mâ„¹[38;5;232m In argument: `episode_length_seconds = sapply(...)`.[39m
Caused by warning in `FUN()`:
[33m![39m NAs introduced by coercion
[38;5;232m[36mâ„¹[38;5;232m Run ]8;;ide:run:dplyr::last_dplyr_warnings()dplyr::last_dplyr_warnings()]8;; to see the 17 remaining warnings.[39m"
"0","# step 1. make data quantifiable (ex. direct mentions = True, no direct mentions = False)"
"0","snl_topics_processed <- snl_topics_processed %>%"
"0","  mutate(across("
"0","    contains(c(""reproductive"", ""immigration"", ""economics"", ""democracy"")),"
"0","    ~ case_when("
"0","        str_detect(., regex(""no (direct|mentions|statements)"", ignore_case = TRUE)) ~ FALSE,"
"0","        is.na(.) ~ NA,"
"0","        TRUE ~ TRUE"
"0","      ),"
"0","    .names = ""mentioned_{.col}"""
"0","  ))"
"0",""
