episode_bars_tls <- tls_airtime_processed %>%
mutate(
episode = paste0(
show,
" (", format(date, "%b %d, %Y"), ")"
)
) %>%
select(episode, episode_length_seconds, date) %>%
arrange(date)  # Sort by air date
# Explicitly set factor levels for the episode column based on the date order
episode_bars_tls <- episode_bars_tls %>%
mutate(episode = factor(episode, levels = unique(episode)))
# Apply the same factor levels to all_segments_tls
all_segments_tls <- all_segments_tls %>%
mutate(episode = factor(episode, levels = levels(episode_bars_tls$episode)))
# Clean up quotes and apostrophes in episode titles
episode_bars_tls <- episode_bars_tls %>%
mutate(
episode = gsub("\"", "'", episode),  # Replace double quotes with single quotes
episode = gsub("’", "'", episode),  # Replace fancy apostrophes with standard ones
episode = gsub("“|”", "'", episode) # Replace fancy quotes with standard ones
)
all_segments_tls <- all_segments_tls %>%
mutate(
episode = gsub("\"", "'", episode),
episode = gsub("’", "'", episode),
episode = gsub("“|”", "'", episode)
)
#should output episodes in chronological order
levels(episode_bars_tls$episode)
# Add a numeric index to tls_airtime_processed to preserve the date order
tls_airtime_processed <- tls_airtime_processed %>%
arrange(date) %>%
mutate(episode_index = row_number())
# Create episode_bars_tls with the same index
episode_bars_tls <- tls_airtime_processed %>%
mutate(
episode = paste0(
show,
" (", format(date, "%b %d, %Y"), ")"
),
episode_index = row_number()
) %>%
select(episode, episode_length_seconds, date, episode_index)
# Add the episode index to all_segments_tls by joining with episode_bars_tls
all_segments_tls <- all_segments_tls %>%
left_join(
episode_bars_tls %>% select(episode, episode_index),
by = "episode"
)
# Create the faceted visualization with pagination using episode_index for ordering
total_pages <- ceiling(length(unique(episode_bars_tls$episode)) / 12)  # Calculate total pages (12 episodes per page)
# Find the maximum episode length across all episodes
max_episode_length <- max(episode_bars_tls$episode_length_seconds, na.rm = TRUE)
for (page in 1:total_pages) {
# Calculate which episode indices belong on this page
page_indices <- ((page-1) * 12 + 1):(min(page * 12, nrow(episode_bars_tls)))
# Filter data for this page
page_bars <- episode_bars_tls %>% filter(episode_index %in% page_indices)
page_segments <- all_segments_tls %>% filter(episode_index %in% page_indices)
# Generate the visualization for the current page
paginated_vis <- ggplot() +
# Draw the full episode bar (grey) for all episodes
geom_rect(
data = page_bars,
aes(xmin = 0, xmax = episode_length_seconds, ymin = 0, ymax = 1, group = episode),
fill = "grey90", color = "black", linewidth = 0.3
) +
# Add Trump segments
geom_rect(
data = filter(page_segments, candidate == "Trump"),
aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1, group = episode),
fill = "red", alpha = 0.8
) +
# Add Harris segments
geom_rect(
data = filter(page_segments, candidate == "Harris"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5, group = episode),
fill = "blue", alpha = 0.8
) +
# Add tick marks for every minute and every 15 seconds
scale_x_continuous(
breaks = seq(0, max(episode_bars_tls$episode_length_seconds, na.rm = TRUE), by = 60),  # Tick marks every minute
minor_breaks = seq(0, max(episode_bars_tls$episode_length_seconds, na.rm = TRUE), by = 15),  # Minor tick marks every 15 seconds
labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)  # Format as mm:ss
) +
# Facet by episode, ordered by the original data order
facet_wrap(~ reorder(episode, episode_index), ncol = 1, scales = "free_x") +
# Add labels and theme
labs(
title = "The Late Show with Stephen Colbert Airtime by Candidate",
subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
x = "Time (minutes:seconds)",
y = NULL
) +
theme_academic()
# Save the current page
save_academic_chart(paginated_vis, paste0("tls_airtime_faceted_page", page, ".pdf"), width = 8.5, height = 11)
}
# Aggregate airtime by date for SNL to avoide "double stacking"
snl_airtime_aggregated <- snl_airtime_processed %>%
group_by(date) %>%
summarize(
total_trump_airtime_seconds = sum(total_trump_airtime_seconds, na.rm = TRUE),
total_harris_airtime_seconds = sum(total_harris_airtime_seconds, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(show = "SNL")  # Add a column to identify the show
# Combine aggregated SNL data with LWT data
combined_airtime <- bind_rows(
snl_airtime_aggregated,
LWT_airtime_processed %>%
select(date, total_trump_airtime_seconds, total_harris_airtime_seconds) %>%
mutate(show = "LWT")
)
# Calculate relative airtime percentages
combined_relative_airtime <- combined_airtime %>%
mutate(
total_candidate_airtime_seconds = total_trump_airtime_seconds + total_harris_airtime_seconds,
trump_airtime_percentage = ifelse(total_candidate_airtime_seconds > 0,
(total_trump_airtime_seconds / total_candidate_airtime_seconds) * 100,
NA),
harris_airtime_percentage = ifelse(total_candidate_airtime_seconds > 0,
(total_harris_airtime_seconds / total_candidate_airtime_seconds) * 100,
NA)
) %>%
select(show, date, trump_airtime_percentage, harris_airtime_percentage)
# Pivot to long format for plotting
combined_relative_airtime_long <- combined_relative_airtime %>%
pivot_longer(
cols = c(trump_airtime_percentage, harris_airtime_percentage),
names_to = "candidate",
values_to = "percentage"
) %>%
mutate(
candidate = recode(candidate,
"trump_airtime_percentage" = "Trump",
"harris_airtime_percentage" = "Harris"),
date = as.factor(date)  # Treat date as a factor for proper ordering
)
# Create the stacked bar chart
combined_stacked_bar_chart <- ggplot(combined_relative_airtime_long, aes(x = factor(date), y = percentage, fill = candidate)) +
geom_bar(stat = "identity", color = "black") +
scale_fill_manual(values = c("Trump" = "red", "Harris" = "blue"), name = "Candidate") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5), size = 3) +  # Add percentage labels
facet_wrap(~ show, scales = "free_x") +  # Facet by show with independent x-axis scales
labs(
title = "Relative Airtime for Trump and Harris Across SNL and LWT",
subtitle = "Proportion of airtime when one of the candidates was mentioned",
x = "Episode Date",
y = "Percentage of Airtime"
) +
theme_academic() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Print the combined stacked bar chart
print(combined_stacked_bar_chart)
# Save the combined stacked bar chart
ggsave("combined_relative_airtime_cleaned.png", plot = combined_stacked_bar_chart, width = 12, height = 8, dpi = 300)
# Create the grouped bar chart
grouped_bar_chart <- ggplot(combined_relative_airtime_long, aes(x = date, y = percentage, fill = candidate)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "black") +
scale_fill_manual(values = c("Trump" = "red", "Harris" = "blue"), name = "Candidate") +
facet_wrap(~ show, ncol = 1, scales = "free_x") +  # Separate by show
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_dodge(width = 0.8), vjust = -0.5, size = 3) +  # Add percentage labels
labs(
title = "Relative Airtime for Trump and Harris by Date",
subtitle = "Proportion of airtime when one of the candidates was mentioned",
x = "Date",
y = "Percentage of Airtime"
) +
theme_academic() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold", size = 12)
)
# Print the grouped bar chart
print(grouped_bar_chart)
# Save the grouped bar chart
ggsave("grouped_relative_airtime_by_date.png", plot = grouped_bar_chart, width = 12, height = 8, dpi = 300)
# Step 1: Process the TLS topics data
tls_topics_processed <- tls_topics %>%
mutate(across(
contains(c("reproductive", "immigration", "economics", "democracy")),
~ case_when(
str_detect(., regex("No (mention|statements|direct|specific)", ignore_case = TRUE)) ~ FALSE,
is.na(.) ~ NA,
TRUE ~ TRUE
),
.names = "mentioned_{.col}"
))
# Step 2: Create the heatmap dataset
tls_heatmap_data <- tls_topics_processed %>%
mutate(
economics = case_when(
`mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == FALSE ~ "Trump",
`mentioned_Trump Economics` == FALSE & `mentioned_Harris Economics` == TRUE ~ "Harris",
`mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == TRUE ~ "Both",
TRUE ~ "None"  # Default case when neither is TRUE
),
reproductive_rights = case_when(
`mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == FALSE ~ "Trump",
`mentioned_Trump reproductive rights` == FALSE & `mentioned_Harris reproductive rights` == TRUE ~ "Harris",
`mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == TRUE ~ "Both",
TRUE ~ "None"
),
immigration = case_when(
`mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == FALSE ~ "Trump",
`mentioned_Trump immigration` == FALSE & `mentioned_Harris immigration` == TRUE ~ "Harris",
`mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == TRUE ~ "Both",
TRUE ~ "None"
),
democracy = case_when(
`mentioned_Trump Democracy` == TRUE & `mentioned_Harris Democracy` == FALSE ~ "Trump",
`mentioned_Trump Democracy` == FALSE & `mentioned_Harris Democracy` == TRUE ~ "Harris",
`mentioned_Trump Democracy` == TRUE & `mentioned_Harris Democracy` == TRUE ~ "Both",
TRUE ~ "None"
)
) %>%
select(show, date, economics, reproductive_rights, immigration, democracy)
# Make sure date is in the correct format
tls_heatmap_data <- tls_heatmap_data %>%
mutate(date = as.Date(date, format = "%d-%b-%y"))
# Step 3: Prepare the data for plotting
tls_heatmap_data <- tls_heatmap_data %>%
arrange(date) %>%
mutate(
ep_num = row_number(),  # Create episode numbers
ep_label = paste0(ep_num, " (", format(date, "%b %d"), ")")  # Create episode labels
)
# Pivot to long format
tls_heatmap_long <- tls_heatmap_data %>%
pivot_longer(
cols = c(economics, reproductive_rights, immigration, democracy),
names_to = "topic",
values_to = "mentioned_by"
)
# Step 4: Create the heatmap
tls_heatmap_plot <- ggplot(tls_heatmap_long,
aes(x = factor(ep_label, levels = unique(tls_heatmap_data$ep_label)),
y = fct_rev(topic), fill = mentioned_by)) +
geom_tile(color = "white", linewidth = 0.5) +
scale_fill_manual(values = mention_colors, name = "Mentioned By") +
labs(
title = "The Late Show with Stephen Colbert Mentions by Topic and Candidate",
x = "Episode Number (Air Date)",
y = "Topic"
) +
theme_academic() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
plot.background = element_rect(fill = "white", color = NA)
) +
# Add a vertical line at Election Day (if it falls within your dataset)
geom_vline(
xintercept = which(tls_heatmap_data$date == as.Date("2024-11-05")),
linetype = "dashed", color = "black"
)
# Print the heatmap
print(tls_heatmap_plot)
# Save the heatmap
ggsave("tls_heatmap_topics.png", plot = tls_heatmap_plot, width = 12, height = 6, dpi = 300)
# Step 1: Process the TLS topics data
tls_topics_processed <- tls_topics %>%
mutate(across(
contains(c("reproductive", "immigration", "economics", "democracy")),
~ case_when(
str_detect(., regex("No (mention|statements|direct|specific)", ignore_case = TRUE)) ~ FALSE,
is.na(.) ~ NA,
TRUE ~ TRUE
),
.names = "mentioned_{.col}"
))
# Step 2: Create the heatmap dataset
tls_heatmap_data <- tls_topics_processed %>%
mutate(
economics = case_when(
`mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == FALSE ~ "Trump",
`mentioned_Trump Economics` == FALSE & `mentioned_Harris Economics` == TRUE ~ "Harris",
`mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == TRUE ~ "Both",
TRUE ~ "None"  # Default case when neither is TRUE
),
reproductive_rights = case_when(
`mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == FALSE ~ "Trump",
`mentioned_Trump reproductive rights` == FALSE & `mentioned_Harris reproductive rights` == TRUE ~ "Harris",
`mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == TRUE ~ "Both",
TRUE ~ "None"
),
immigration = case_when(
`mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == FALSE ~ "Trump",
`mentioned_Trump immigration` == FALSE & `mentioned_Harris immigration` == TRUE ~ "Harris",
`mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == TRUE ~ "Both",
TRUE ~ "None"
)
) %>%
select(show, date, economics, reproductive_rights, immigration, democracy)
# Step 1: Process the TLS topics data
tls_topics_processed <- tls_topics %>%
mutate(across(
contains(c("reproductive", "immigration", "economics", "democracy")),
~ case_when(
str_detect(., regex("No (mention|statements|direct|specific)", ignore_case = TRUE)) ~ FALSE,
is.na(.) ~ NA,
TRUE ~ TRUE
),
.names = "mentioned_{.col}"
))
# Step 2: Create the heatmap dataset
tls_heatmap_data <- tls_topics_processed %>%
mutate(
economics = case_when(
`mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == FALSE ~ "Trump",
`mentioned_Trump Economics` == FALSE & `mentioned_Harris Economics` == TRUE ~ "Harris",
`mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == TRUE ~ "Both",
TRUE ~ "None"  # Default case when neither is TRUE
),
reproductive_rights = case_when(
`mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == FALSE ~ "Trump",
`mentioned_Trump reproductive rights` == FALSE & `mentioned_Harris reproductive rights` == TRUE ~ "Harris",
`mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == TRUE ~ "Both",
TRUE ~ "None"
),
immigration = case_when(
`mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == FALSE ~ "Trump",
`mentioned_Trump immigration` == FALSE & `mentioned_Harris immigration` == TRUE ~ "Harris",
`mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == TRUE ~ "Both",
TRUE ~ "None"
)
) %>%
select(show, date, economics, reproductive_rights, immigration, democracy)
# Step 1: Process the TLS topics data
tls_topics_processed <- tls_topics %>%
mutate(across(
contains(c("reproductive", "immigration", "economics", "democracy")),
~ case_when(
str_detect(., regex("No (mention|statements|direct|specific)", ignore_case = TRUE)) ~ FALSE,
is.na(.) ~ NA,
TRUE ~ TRUE
),
.names = "mentioned_{.col}"
))
# Step 2: Create the heatmap dataset
tls_heatmap_data <- tls_topics_processed %>%
mutate(
economics = case_when(
`mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == FALSE ~ "Trump",
`mentioned_Trump Economics` == FALSE & `mentioned_Harris Economics` == TRUE ~ "Harris",
`mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == TRUE ~ "Both",
TRUE ~ "None"  # Default case when neither is TRUE
),
reproductive_rights = case_when(
`mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == FALSE ~ "Trump",
`mentioned_Trump reproductive rights` == FALSE & `mentioned_Harris reproductive rights` == TRUE ~ "Harris",
`mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == TRUE ~ "Both",
TRUE ~ "None"
),
immigration = case_when(
`mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == FALSE ~ "Trump",
`mentioned_Trump immigration` == FALSE & `mentioned_Harris immigration` == TRUE ~ "Harris",
`mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == TRUE ~ "Both",
TRUE ~ "None"
)
) %>%
select(show, date, economics, reproductive_rights, immigration)
# Make sure date is in the correct format
tls_heatmap_data <- tls_heatmap_data %>%
mutate(date = as.Date(date, format = "%d-%b-%y"))
# Step 3: Prepare the data for plotting
tls_heatmap_data <- tls_heatmap_data %>%
arrange(date) %>%
mutate(
ep_num = row_number(),  # Create episode numbers
ep_label = paste0(ep_num, " (", format(date, "%b %d"), ")")  # Create episode labels
)
# Pivot to long format
tls_heatmap_long <- tls_heatmap_data %>%
pivot_longer(
cols = c(economics, reproductive_rights, immigration),
names_to = "topic",
values_to = "mentioned_by"
)
# Step 4: Create the heatmap
tls_heatmap_plot <- ggplot(tls_heatmap_long,
aes(x = factor(ep_label, levels = unique(tls_heatmap_data$ep_label)),
y = fct_rev(topic), fill = mentioned_by)) +
geom_tile(color = "white", linewidth = 0.5) +
scale_fill_manual(values = mention_colors, name = "Mentioned By") +
labs(
title = "The Late Show with Stephen Colbert Mentions by Topic and Candidate",
x = "Episode Number (Air Date)",
y = "Topic"
) +
theme_academic() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
plot.background = element_rect(fill = "white", color = NA)
) +
# Add a vertical line at Election Day (if it falls within your dataset)
geom_vline(
xintercept = which(tls_heatmap_data$date == as.Date("2024-11-05")),
linetype = "dashed", color = "black"
)
# Print the heatmap
print(tls_heatmap_plot)
# Save the heatmap
ggsave("tls_heatmap_topics.png", plot = tls_heatmap_plot, width = 12, height = 6, dpi = 300)
# Step 1: Process the TLS topics data
tls_topics_processed <- tls_topics %>%
mutate(across(
contains(c("reproductive", "immigration", "economics", "democracy")),
~ case_when(
str_detect(., regex("No (mention|statements|direct|specific)", ignore_case = TRUE)) ~ FALSE,
is.na(.) ~ NA,
TRUE ~ TRUE
),
.names = "mentioned_{.col}"
))
# Step 2: Create the heatmap dataset
tls_heatmap_data <- tls_topics_processed %>%
mutate(
economics = case_when(
`mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == FALSE ~ "Trump",
`mentioned_Trump Economics` == FALSE & `mentioned_Harris Economics` == TRUE ~ "Harris",
`mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == TRUE ~ "Both",
TRUE ~ "None"  # Default case when neither is TRUE
),
reproductive_rights = case_when(
`mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == FALSE ~ "Trump",
`mentioned_Trump reproductive rights` == FALSE & `mentioned_Harris reproductive rights` == TRUE ~ "Harris",
`mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == TRUE ~ "Both",
TRUE ~ "None"
),
immigration = case_when(
`mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == FALSE ~ "Trump",
`mentioned_Trump immigration` == FALSE & `mentioned_Harris immigration` == TRUE ~ "Harris",
`mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == TRUE ~ "Both",
TRUE ~ "None"
)
) %>%
select(show, date, economics, reproductive_rights, immigration)
# Make sure date is in the correct format
tls_heatmap_data <- tls_heatmap_data %>%
mutate(date = as.Date(date, format = "%d-%b-%y"))
# Step 3: Prepare the data for plotting
tls_heatmap_data <- tls_heatmap_data %>%
arrange(date) %>%
mutate(
ep_num = row_number(),  # Create episode numbers
ep_label = paste0(ep_num, " (", format(date, "%b %d"), ")")  # Create episode labels
)
# Pivot to long format
tls_heatmap_long <- tls_heatmap_data %>%
pivot_longer(
cols = c(economics, reproductive_rights, immigration),
names_to = "topic",
values_to = "mentioned_by"
)
# Step 4: Create the heatmap
# Fix for TLS heatmap
tls_heatmap_plot <- ggplot(tls_heatmap_long,
aes(x = factor(ep_label, levels = unique(tls_heatmap_data$ep_label)),
y = fct_rev(topic), fill = mentioned_by)) +
geom_tile(color = "white", linewidth = 0.5) +
scale_fill_manual(values = mention_colors, name = "Mentioned By") +
labs(
title = "The Late Show with Stephen Colbert Mentions by Topic and Candidate",
x = "Episode Number (Air Date)",
y = "Topic"
) +
theme_academic() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, color = "black"), # Explicitly show y-axis text
panel.grid = element_blank(),
plot.background = element_rect(fill = "white", color = NA)
) +
geom_vline(
xintercept = which(tls_heatmap_data$date == as.Date("2024-11-05")),
linetype = "dashed", color = "black"
)
# Print the heatmap
print(tls_heatmap_plot)
# Save the heatmap
ggsave("tls_heatmap_topics.png", plot = tls_heatmap_plot, width = 12, height = 6, dpi = 300)
#create the heatmap
# Step 4: Create the heatmap
lwt_heatmap_plot <- ggplot(heatmap_long,
aes(x = factor(ep_label, levels = unique(lwt_heatmap_data$ep_label)),
y = fct_rev(topic), fill = mentioned_by)) +
geom_tile(color = "white", linewidth = 0.5) +
scale_fill_manual(values = mention_colors, name = "Mentioned By") +
labs(
title = "Last Week Tonight with John Oliver Mentions by Topic and Candidate",
x = "Episode Number (Air Date)",
y = "Topic"
) +
theme_academic() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, color = "black"), # Explicitly show y-axis text
panel.grid = element_blank(),
plot.background = element_rect(fill = "white", color = NA)
)
# Print the heatmap
print(lwt_heatmap_plot)
# Save the heatmap
ggsave("lwt_heatmap_topics.png", plot = lwt_heatmap_plot, width = 12, height = 6, dpi = 300)
