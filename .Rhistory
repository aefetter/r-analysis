labs(
title = "Gender Breakdown of Hosts on TDS",
fill = "Host Gender"
) +
theme_void() +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5), color = "white", size = 4) +
scale_fill_manual(values = c(
"Female" = "#e91e63",   # pink
"Male" = "#006400"     # dark green
))
unique(tds_topics$`Gender of Host`)
# Combine all processed airtime dataframes into one
combined_airtime <- bind_rows(
snl_airtime_processed %>%
select(date, total_trump_airtime_seconds, total_harris_airtime_seconds) %>%
mutate(show = "SNL"),
tls_airtime_processed %>%
select(date, total_trump_airtime_seconds, total_harris_airtime_seconds) %>%
mutate(show = "TLS"),
LWT_airtime_processed %>%
select(date, total_trump_airtime_seconds, total_harris_airtime_seconds) %>%
mutate(show = "LWT"),
tds_airtime_processed %>%
select(date, total_trump_airtime_seconds, total_harris_airtime_seconds) %>%
mutate(show = "TDS")
)
# Group by week and calculate total airtime for each candidate
weekly_airtime <- combined_airtime %>%
mutate(week = floor_date(date, "week")) %>%  # Group by week
group_by(week, show) %>%
summarize(
total_trump_airtime_seconds = sum(total_trump_airtime_seconds, na.rm = TRUE),
total_harris_airtime_seconds = sum(total_harris_airtime_seconds, na.rm = TRUE),
.groups = "drop"
)
# Calculate percentage of airtime for each candidate
weekly_percentages <- weekly_airtime %>%
mutate(
total_candidate_airtime_seconds = total_trump_airtime_seconds + total_harris_airtime_seconds,
percent_harris = ifelse(total_candidate_airtime_seconds > 0,
(total_harris_airtime_seconds / total_candidate_airtime_seconds) * 100,
NA),
percent_trump = 100 - percent_harris  # Remaining percentage for Trump
) %>%
select(week, show, percent_harris, percent_trump)
# Combine into one row per week with both candidate shares
average_weekly_percentages <- weekly_percentages %>%
group_by(week) %>%
summarize(
avg_percent_harris = mean(percent_harris, na.rm = TRUE),
avg_percent_trump = mean(percent_trump, na.rm = TRUE),
.groups = "drop"
) %>%
pivot_longer(
cols = c(avg_percent_harris, avg_percent_trump),
names_to = "candidate",
values_to = "percentage"
) %>%
mutate(
candidate = recode(candidate,
"avg_percent_harris" = "Harris",
"avg_percent_trump" = "Trump")
)
# Get the position of the election week factor on the Y-axis
election_week <- as.Date("2024-11-05")
election_week_floor <- floor_date(election_week, "week")
# Convert weeks to factor in the same order used in the plot
week_levels <- sort(unique(average_weekly_percentages$week), decreasing = TRUE)
election_week_index <- which(week_levels == election_week_floor)
# Now plot with a horizontal line at that Y-position
airtime_by_week <- ggplot(average_weekly_percentages, aes(x = percentage, y = fct_rev(as.factor(week)), fill = candidate)) +
geom_col(position = "stack", alpha = 0.9) +
geom_hline(yintercept = election_week_index, linetype = "dashed", color = "black", size = 1) +  # Election Day line
annotate("text", x = 100, y = election_week_index, label = "Election Day", hjust = 0, vjust = -0.5, size = 4, color = "black") +
scale_x_continuous(labels = function(x) paste0(x, "%"), limits = c(0, 100)) +
labs(
title = "Weekly Distribution of Airtime Between Trump and Harris",
subtitle = "Averaged across Saturday Night Live, The Late Show, Last Week Tonight, and the Daily Show",
x = "Share of Candidate Airtime",
y = "Week"
) +
scale_fill_manual(values = c("Trump" = "red", "Harris" = "blue")) +
theme_minimal(base_size = 14) +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5)
) + coord_cartesian(clip = "off")
# Print the plot
print(airtime_by_week)
ggsave(
filename = "weekly_airtime_distribution.png",
plot = airtime_by_week,
width = 12,
height = 8,
dpi = 300
)
# Combine all heatmap dataframes into one
combined_topics <- bind_rows(
snl_heatmap_data %>%
select(show, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "SNL"),
tls_heatmap_data %>%
select(show, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "TLS"),
lwt_heatmap_data %>%
select(show, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "LWT"),
tds_heatmap_data %>%
select(show, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "TDS")
)
# Group by topic and candidate, and count mentions
total_mentions <- combined_topics %>%
filter(mentioned_by != "None") %>%  # Exclude rows where no candidate was mentioned
group_by(topic, mentioned_by) %>%
summarize(total_mentions = n(), .groups = "drop")
#to put "both" in the middle
total_mentions <- total_mentions %>%
mutate(
mentioned_by = factor(mentioned_by, levels = c("Trump", "Both", "Harris"))
)
# Create the stacked bar chart
stacked_bar_chart <- ggplot(total_mentions, aes(x = topic, y = total_mentions, fill = mentioned_by)) +
geom_bar(stat = "identity", position = "stack", alpha = 0.9) +
scale_fill_manual(values = c("Trump" = "red", "Harris" = "blue", "Both" = "purple")) +
labs(
title = "Total Mentions of 2024 Election Topics by Candidate",
subtitle = "Aggregated across SNL, TLS, LWT, & TDS",
x = "Topic",
y = "Total Mentions",
fill = "Candidate"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5)
)
# Print the chart
print(stacked_bar_chart)
# Save the chart
ggsave("total_mentions_by_topic.png", plot = stacked_bar_chart, width = 12, height = 8, dpi = 300)
#these are for the date based topic visualizations
# Ensure the `date` column is in Date format for all heatmap dataframes
snl_heatmap_data <- snl_heatmap_data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))  # Adjust the format if needed
tls_heatmap_data <- tls_heatmap_data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))  # Adjust the format if needed
lwt_heatmap_data <- lwt_heatmap_data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))  # Adjust the format if needed
combined_topics_with_dates <- bind_rows(
snl_heatmap_data %>%
select(show, date, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "SNL"),
tls_heatmap_data %>%
select(show, date, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "TLS"),
lwt_heatmap_data %>%
select(show, date, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "LWT"),
tds_heatmap_data %>%
select(show, date, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "TDS"),
)
# Filter out rows where no candidate was mentioned
combined_topics_with_dates <- combined_topics_with_dates %>%
filter(mentioned_by != "None")
# Group by date, topic, and candidate, and count mentions
mentions_over_time <- combined_topics_with_dates %>%
group_by(date, topic, mentioned_by) %>%
summarize(total_mentions = n(), .groups = "drop")
# Step 1: Adjust the data to handle "Both" by duplicating rows
mentions_adjusted <- mentions_over_time %>%
mutate(mentioned_by = ifelse(mentioned_by == "Both", "Trump", mentioned_by)) %>%
bind_rows(
mentions_over_time %>%
filter(mentioned_by == "Both") %>%
mutate(mentioned_by = "Harris")
)
# Step 2: Group by date, topic, and candidate, and recalculate total mentions
mentions_adjusted <- mentions_adjusted %>%
group_by(date, topic, mentioned_by) %>%
summarize(total_mentions = sum(total_mentions), .groups = "drop")
# Step 3: Expand the data to include all dates for each topic and candidate
all_dates <- seq(min(mentions_adjusted$date), max(mentions_adjusted$date), by = "day")
mentions_expanded <- mentions_adjusted %>%
group_by(topic, mentioned_by) %>%
complete(date = all_dates, fill = list(total_mentions = 0)) %>%  # Fill missing dates with 0 mentions
arrange(date) %>%
ungroup()
# Step 4: Calculate cumulative mentions for each candidate over time
mentions_cumulative <- mentions_expanded %>%
group_by(topic, mentioned_by) %>%
mutate(cumulative_mentions = cumsum(total_mentions)) %>%
ungroup()
# Step 5: Reorder the `mentioned_by` factor to bring Harris (blue) to the front
mentions_cumulative <- mentions_cumulative %>%
mutate(mentioned_by = factor(mentioned_by, levels = c("Trump", "Harris")))
# Step 6: Create the cumulative area chart
cumulative_area_chart <- ggplot(mentions_cumulative, aes(x = date, y = cumulative_mentions, fill = mentioned_by)) +
geom_area(alpha = 0.7, position = "identity") +  # Use position = "identity" for overlapping areas
facet_wrap(~ topic, ncol = 1) +
scale_fill_manual(values = c("Trump" = "red", "Harris" = "blue")) +  # Red and blue will blend into purple
labs(
title = "Cumulative Mentions of Election Topics Over Time",
subtitle = "Overlapping Areas Highlight Shared Mentions by Trump and Harris Across All Analyzed Shows",
x = "Date",
y = "Cumulative Mentions",
fill = "Candidate"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", size = 16),
strip.text.x = element_text(face = "bold", size = 12),
panel.background = element_rect(fill = "white", color = NA),  # White background
plot.background = element_rect(fill = "white", color = NA)   # White background for the entire plot
)
# Step 7: Print the chart
print(cumulative_area_chart)
# Step 8: Save the chart
ggsave("cumulative_mentions_over_time.png", plot = cumulative_area_chart, width = 12, height = 8, dpi = 300)
# Step 1: Prepare cumulative airtime data
airtime_cumulative <- combined_airtime %>%
arrange(date) %>%
group_by(date) %>%
summarize(
trump_airtime_cumulative = sum(total_trump_airtime_seconds, na.rm = TRUE),
harris_airtime_cumulative = sum(total_harris_airtime_seconds, na.rm = TRUE),
.groups = "drop"
) %>%
# Get cumulative sums across all dates
mutate(
trump_airtime_cumulative = cumsum(trump_airtime_cumulative),
harris_airtime_cumulative = cumsum(harris_airtime_cumulative)
)
# Step 2: Prepare cumulative mentions data (aggregated across all topics)
mentions_cumulative_all_topics <- mentions_cumulative %>%
group_by(date, mentioned_by) %>%
summarize(cumulative_mentions = sum(cumulative_mentions), .groups = "drop")
# Step 3: Combine datasets for plotting
combined_data <- airtime_cumulative %>%
left_join(
mentions_cumulative_all_topics %>%
pivot_wider(
names_from = mentioned_by,
values_from = cumulative_mentions,
names_prefix = "mentions_"
),
by = "date"
)
# Step 4: Plot
ggplot(combined_data, aes(x = date)) +
# Cumulative Airtime
geom_line(aes(y = trump_airtime_cumulative, color = "Trump Airtime"), linewidth = 1.3) +
geom_line(aes(y = harris_airtime_cumulative, color = "Harris Airtime"), linewidth = 1.3) +
# Cumulative Mentions (rescaled)
geom_line(aes(y = mentions_Trump * 60, color = "Trump Mentions"), linetype = "dashed", linewidth = 1.1) +
geom_line(aes(y = mentions_Harris * 60, color = "Harris Mentions"), linetype = "dashed", linewidth = 1.1) +
# Election Day reference line
geom_vline(xintercept = as.Date("2024-11-05"), linetype = "dotted", color = "black", linewidth = 0.8) +
annotate("text", x = as.Date("2024-11-05"), y = max(combined_data$trump_airtime_cumulative, na.rm = TRUE) * 0.95,
label = "Election Day", angle = 90, vjust = -0.5, size = 4) +
# Axis + color scales
scale_y_continuous(
name = "Cumulative Airtime (seconds)",
sec.axis = sec_axis(~./60, name = "Cumulative Topic Mentions")
) +
scale_color_manual(
name = NULL,
values = c(
"Trump Airtime" = "#B22222",
"Harris Airtime" = "#1E3A8A",
"Trump Mentions" = "#FA8072",
"Harris Mentions" = "#6495ED"
)
) +
# Labels + theme
labs(
title = "Candidate Airtime vs. Topic Mentions Over Time",
subtitle = "Solid lines = Airtime (left axis) · Dashed lines = Topic Mentions (right axis)",
x = "Date"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 13, hjust = 0.5),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA)
)
# Save the plot
ggsave("airtime_vs_mentions_over_time_pretty.png", width = 12, height = 8, dpi = 300)
# Create the stacked area chart
ggplot(combined_data, aes(x = date)) +
# Stacked area for cumulative airtime
geom_area(aes(y = trump_airtime_cumulative, fill = "Trump Airtime"), position = "stack", alpha = 0.3) +
geom_area(aes(y = harris_airtime_cumulative, fill = "Harris Airtime"), position = "stack", alpha = 0.3) +
# Dashed lines for cumulative mentions (scaled for visual comparison)
geom_line(aes(y = mentions_Trump * 60, color = "Trump Mentions"),
linetype = "dashed", linewidth = 1.2) +
geom_line(aes(y = mentions_Harris * 60, color = "Harris Mentions"),
linetype = "dashed", linewidth = 1.2) +
# Election Day marker
geom_vline(xintercept = as.Date("2024-11-05"),
linetype = "longdash", color = "black", linewidth = 0.7) +
annotate("text", x = as.Date("2024-11-05"),
y = max(combined_data$trump_airtime_cumulative + combined_data$harris_airtime_cumulative, na.rm = TRUE) * 0.9,
label = "Election Day", angle = 90, hjust = -0.2, size = 4) +
# Color scales
scale_fill_manual(
name = "Airtime (Area)",
values = c("Trump Airtime" = "red", "Harris Airtime" = "blue")
) +
scale_color_manual(
name = "Mentions (Line)",
values = c("Trump Mentions" = "darkred", "Harris Mentions" = "darkblue")
) +
# Y-axis with secondary axis for mentions
scale_y_continuous(
name = "Cumulative Airtime (seconds)",
sec.axis = sec_axis(~./60, name = "Cumulative Topic Mentions")
) +
# Labels and styling
labs(
title = "Stacked Cumulative Airtime vs. Topic Mentions Over Time",
subtitle = "Stacked areas show total airtime; dashed lines show topic mentions",
x = "Date"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
legend.box = "vertical",
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA)
)
# Save the plot
ggsave("stacked_cumulative_airtime_mentions_timeline.png", width = 12, height = 8, dpi = 300)
# === STEP 1: Process The Late Show Airtime Data ===
tls_airtime_processed <- tls_airtime %>%
mutate(
total_trump_airtime_seconds = sapply(`trump air time stamps`, calculate_duration),
total_harris_airtime_seconds = sapply(`harris air time stamps`, calculate_duration),
total_trump_airtime_minutes = round(total_trump_airtime_seconds / 60, 2),
total_harris_airtime_minutes = round(total_harris_airtime_seconds / 60, 2),
episode_length_seconds = sapply(`run time`, function(runtime) {
time_parts <- unlist(strsplit(as.character(runtime), ":"))
if (length(time_parts) == 3) {
as.numeric(time_parts[1]) * 3600 + as.numeric(time_parts[2]) * 60 + as.numeric(time_parts[3])
} else if (length(time_parts) == 2) {
as.numeric(time_parts[1]) * 60 + as.numeric(time_parts[2])
} else {
as.numeric(time_parts[1])
}
}),
date = as.Date(date, format = "%d-%b-%y")
)
# === STEP 2: Build Segments for Visualization ===
all_segments_tls <- data.frame(
start = numeric(0),
end = numeric(0),
candidate = character(0),
episode = character(0),
stringsAsFactors = FALSE
)
for (i in 1:nrow(tls_airtime_processed)) {
episode <- tls_airtime_processed[i, ]
episode_title <- paste0(
episode$show,
" (", format(episode$date, "%b %d, %Y"), ")"
)
trump_segments <- process_timestamps(episode$`trump air time stamps`, "Trump")
harris_segments <- process_timestamps(episode$`harris air time stamps`, "Harris")
if (nrow(trump_segments) > 0) {
trump_segments$episode <- episode_title
all_segments_tls <- rbind(all_segments_tls, trump_segments)
}
if (nrow(harris_segments) > 0) {
harris_segments$episode <- episode_title
all_segments_tls <- rbind(all_segments_tls, harris_segments)
}
}
# === STEP 3: Build Episode Bars with Cleaned Labels ===
episode_bars_tls <- tls_airtime_processed %>%
mutate(
episode = paste0(
show,
" (", format(date, "%b %d, %Y"), ")"
),
episode_index = row_number()
) %>%
select(episode, episode_length_seconds, date, episode_index) %>%
mutate(
episode = gsub("\"", "'", episode),
episode = gsub("’", "'", episode),
episode = gsub("“|”", "'", episode),
episode = str_trim(episode)
)
all_segments_tls <- all_segments_tls %>%
mutate(
episode = gsub("\"", "'", episode),
episode = gsub("’", "'", episode),
episode = gsub("“|”", "'", episode),
episode = str_trim(episode)
) %>%
left_join(
episode_bars_tls %>% select(episode, episode_index),
by = "episode"
)
# === STEP 4: Paginated Visualization ===
episodes_per_page <- 12
total_pages <- ceiling(nrow(episode_bars_tls) / episodes_per_page)
for (page in 1:total_pages) {
page_indices <- ((page - 1) * episodes_per_page + 1):min(page * episodes_per_page, nrow(episode_bars_tls))
page_bars <- episode_bars_tls %>%
filter(episode_index %in% page_indices) %>%
mutate(label = episode, is_dummy = FALSE)
page_segments <- all_segments_tls %>%
filter(episode_index %in% page_indices) %>%
left_join(page_bars %>% select(episode, label), by = "episode")
# Add dummy rows if needed
if (nrow(page_bars) < episodes_per_page) {
dummy_count <- episodes_per_page - nrow(page_bars)
dummy_labels <- paste0("dummy_", seq_len(dummy_count))
invisible_labels <- strrep(" ", seq_len(dummy_count))
dummy_bars <- tibble(
episode = dummy_labels,
episode_length_seconds = 1,
date = NA,
episode_index = max(page_bars$episode_index, na.rm = TRUE) + seq_len(dummy_count),
label = invisible_labels,
is_dummy = TRUE
)
page_bars <- bind_rows(page_bars, dummy_bars)
}
page_bars$label <- factor(page_bars$label, levels = page_bars$label)
page_segments$label <- factor(page_segments$label, levels = levels(page_bars$label))
dummy_segments <- page_bars %>%
filter(is_dummy) %>%
mutate(start = NA_real_, end = NA_real_, candidate = "dummy") %>%
select(label, start, end, candidate)
all_page_segments <- bind_rows(page_segments, dummy_segments)
paginated_vis <- ggplot() +
geom_rect(
data = page_bars %>% filter(!is_dummy),
aes(xmin = 0, xmax = episode_length_seconds, ymin = 0, ymax = 1),
fill = "grey90", color = "black", linewidth = 0.3
) +
geom_rect(
data = filter(all_page_segments, candidate == "Trump"),
aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1),
fill = "#e74c3c", alpha = 0.8
) +
geom_rect(
data = filter(all_page_segments, candidate == "Harris"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5),
fill = "#2980b9", alpha = 0.8
) +
geom_rect(
data = filter(all_page_segments, candidate == "dummy"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 1),
fill = NA, color = NA
) +
scale_x_continuous(
breaks = waiver(),
labels = function(x) sprintf("%d:%02d", as.integer(x) %/% 60, as.integer(x) %% 60)
) +
facet_wrap(~ label, ncol = 1, nrow = episodes_per_page, scales = "free_x") +
labs(
title = paste0("The Late Show Candidate Airtime (Page ", page, " of ", total_pages, ")"),
subtitle = "Red: Trump | Blue: Harris",
x = "Time (minutes:seconds)",
y = NULL
) +
theme_minimal(base_size = 9) +
theme(
strip.text = element_text(size = 8, hjust = 0),
strip.background = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.spacing = unit(0.1, "lines"),
plot.title = element_text(size = 10, face = "bold"),
plot.subtitle = element_text(size = 8),
plot.margin = margin(8, 8, 8, 8)
)
ggsave(
filename = paste0("tls_airtime_page", page, ".jpeg"),
plot = paginated_vis,
width = 7,
height = 10.5,
dpi = 300,
device = "jpeg"
)
}
