start = numeric(0),
end = numeric(0),
candidate = character(0),
episode = character(0),
stringsAsFactors = FALSE
)
for (i in 1:nrow(snl_airtime_processed)) {
episode <- snl_airtime_processed[i, ]
episode_title <- as.character(episode$show)
episode_length <- episode$episode_length_seconds
# Process Trump and Harris airtime
trump_segments <- process_timestamps(episode$`trump air time stamps`, "Trump")
harris_segments <- process_timestamps(episode$`harris air time stamps`, "Harris")
# Add episode title to each segment
if (nrow(trump_segments) > 0) {
trump_segments$episode <- episode_title
all_segments <- rbind(all_segments, trump_segments)
}
if (nrow(harris_segments) > 0) {
harris_segments$episode <- episode_title
all_segments <- rbind(all_segments, harris_segments)
}
}
# Verify we have data in all_segments
print(paste("Number of rows in all_segments:", nrow(all_segments)))
print(head(all_segments))
# Check for any episodes with no segments
episodes_with_segments <- unique(all_segments$episode)
all_episodes <- unique(snl_airtime_processed$show)
missing_episodes <- setdiff(all_episodes, episodes_with_segments)
print(paste("Episodes with no segments:", paste(missing_episodes, collapse=", ")))
# Create a data frame for grey bars with exactly the same episode names
episode_bars <- snl_airtime_processed %>%
select(show, episode_length_seconds) %>%
rename(episode = show)
# Step 2: Create the faceted visualization with debugging
all_episodes_vis <- ggplot() +
# Debug: Draw a visible grey bar for all episodes
geom_rect(
data = episode_bars,
aes(xmin = 0, xmax = episode_length_seconds, ymin = 0, ymax = 1),
fill = "grey90", color = "black", size = 0.3
) +
# Debug: Add Trump segments with a distinct border
geom_rect(
data = filter(all_segments, candidate == "Trump"),
aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1),
fill = "red", color = "darkred", alpha = 0.8, size = 0.5
) +
# Debug: Add Harris segments with a distinct border
geom_rect(
data = filter(all_segments, candidate == "Harris"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5),
fill = "blue", color = "darkblue", alpha = 0.8, size = 0.5
) +
# Add tick marks
scale_x_continuous(
breaks = seq(0, max(episode_bars$episode_length_seconds), by = 60),
minor_breaks = seq(0, max(episode_bars$episode_length_seconds), by = 15),
labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)
) +
# Facet by episode - each subplot gets its own row
facet_wrap(~ episode, ncol = 1, scales = "free_x") +
# Add labels and theme
labs(
title = "SNL Airtime Visualization for All Episodes",
subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
x = "Time (minutes:seconds)",
y = NULL
) +
theme_minimal(base_size = 12) +
theme(
strip.text = element_text(face = "bold", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey80", size = 0.3),
panel.grid.minor.x = element_line(color = "grey90", size = 0.2),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(size = 10, color = "black")
)
# Step 3: Print the visualization
print(all_episodes_vis)
# Step 1: Process all episodes
all_segments <- data.frame(
start = numeric(0),
end = numeric(0),
candidate = character(0),
episode = character(0),
stringsAsFactors = FALSE
)
for (i in 1:nrow(snl_airtime_processed)) {
episode <- snl_airtime_processed[i, ]
episode_title <- as.character(episode$show)
episode_length <- episode$episode_length_seconds
# Process Trump and Harris airtime
trump_segments <- process_timestamps(episode$`trump air time stamps`, "Trump")
harris_segments <- process_timestamps(episode$`harris air time stamps`, "Harris")
# Add episode title to each segment
if (nrow(trump_segments) > 0) {
trump_segments$episode <- episode_title
all_segments <- rbind(all_segments, trump_segments)
}
if (nrow(harris_segments) > 0) {
harris_segments$episode <- episode_title
all_segments <- rbind(all_segments, harris_segments)
}
}
# Verify we have data in all_segments
print(paste("Number of rows in all_segments:", nrow(all_segments)))
print(head(all_segments))
# Check for any episodes with no segments
episodes_with_segments <- unique(all_segments$episode)
all_episodes <- unique(snl_airtime_processed$show)
missing_episodes <- setdiff(all_episodes, episodes_with_segments)
print(paste("Episodes with no segments:", paste(missing_episodes, collapse=", ")))
# Create a data frame for grey bars with exactly the same episode names
episode_bars <- snl_airtime_processed %>%
select(show, episode_length_seconds) %>%
rename(episode = show)
# Step 2: Create the faceted visualization with debugging
all_episodes_vis <- ggplot() +
# Debug: Draw a visible grey bar for all episodes
geom_rect(
data = episode_bars,
aes(xmin = 0, xmax = episode_length_seconds, ymin = 0, ymax = 1),
fill = "grey90", color = "black", size = 0.3
) +
# Debug: Add Trump segments with a distinct border
geom_rect(
data = filter(all_segments, candidate == "Trump"),
aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1),
fill = "red", color = "darkred", alpha = 0.8, size = 0.5
) +
# Debug: Add Harris segments with a distinct border
geom_rect(
data = filter(all_segments, candidate == "Harris"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5),
fill = "blue", color = "darkblue", alpha = 0.8, size = 0.5
) +
# Add tick marks
scale_x_continuous(
breaks = seq(0, max(episode_bars$episode_length_seconds), by = 60),
minor_breaks = seq(0, max(episode_bars$episode_length_seconds), by = 15),
labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)
) +
# Facet by episode - each subplot gets its own row
facet_wrap(~ episode, ncol = 1, scales = "free_x") +
# Add labels and theme
labs(
title = "SNL Airtime Visualization for All Episodes",
subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
x = "Time (minutes:seconds)",
y = NULL
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey80", size = 0.3),
panel.grid.minor.x = element_line(color = "grey90", size = 0.2),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(size = 10, color = "black")
)
# Step 3: Print the visualization
print(all_episodes_vis)
# Step 1: Process all episodes
all_segments <- data.frame(
start = numeric(0),
end = numeric(0),
candidate = character(0),
episode = character(0),
stringsAsFactors = FALSE
)
for (i in 1:nrow(snl_airtime_processed)) {
episode <- snl_airtime_processed[i, ]
episode_title <- as.character(episode$show)
episode_length <- episode$episode_length_seconds
# Process Trump and Harris airtime
trump_segments <- process_timestamps(episode$`trump air time stamps`, "Trump")
harris_segments <- process_timestamps(episode$`harris air time stamps`, "Harris")
# Add episode title to each segment
if (nrow(trump_segments) > 0) {
trump_segments$episode <- episode_title
all_segments <- rbind(all_segments, trump_segments)
}
if (nrow(harris_segments) > 0) {
harris_segments$episode <- episode_title
all_segments <- rbind(all_segments, harris_segments)
}
}
# Verify we have data in all_segments
print(paste("Number of rows in all_segments:", nrow(all_segments)))
print(head(all_segments))
# Check for any episodes with no segments
episodes_with_segments <- unique(all_segments$episode)
all_episodes <- unique(snl_airtime_processed$show)
missing_episodes <- setdiff(all_episodes, episodes_with_segments)
print(paste("Episodes with no segments:", paste(missing_episodes, collapse=", ")))
# Create a data frame for grey bars with exactly the same episode names
episode_bars <- snl_airtime_processed %>%
select(show, episode_length_seconds) %>%
rename(episode = show)
# Step 2: Create the faceted visualization with debugging - FIXED VERSION
all_episodes_vis <- ggplot() +
# Draw the full episode bar (grey) for all episodes
geom_rect(
data = episode_bars,
aes(xmin = 0, xmax = episode_length_seconds, ymin = 0, ymax = 1, group = episode),
fill = "grey90", color = "black", size = 0.3
) +
# Add Trump segments with more explicit mapping
geom_rect(
data = filter(all_segments, candidate == "Trump"),
aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1, group = episode),
fill = "red", color = "darkred", alpha = 0.8, size = 0.5
) +
# Add Harris segments with more explicit mapping
geom_rect(
data = filter(all_segments, candidate == "Harris"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5, group = episode),
fill = "blue", color = "darkblue", alpha = 0.8, size = 0.5
) +
# Add tick marks - keep scales consistent
scale_x_continuous(
breaks = seq(0, max(episode_bars$episode_length_seconds), by = 60),
minor_breaks = seq(0, max(episode_bars$episode_length_seconds), by = 15),
labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)
) +
# Force a more explicit interaction between facets and data
facet_wrap(~ episode, ncol = 1, scales = "free_x", drop = FALSE) +
# Rest of your code stays the same
labs(
title = "SNL Airtime Visualization for All Episodes",
subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
x = "Time (minutes:seconds)",
y = NULL
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey80", size = 0.3),
panel.grid.minor.x = element_line(color = "grey90", size = 0.2),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(size = 10, color = "black")
)
# Step 3: Print the visualization
print(all_episodes_vis)
# Create a list to store all the individual episode plots
episode_plots <- list()
# Loop through all episodes
for (i in 1:nrow(snl_airtime_processed)) {
# Get current episode data
current_episode <- snl_airtime_processed[i, ]
episode_title <- current_episode$show
episode_length <- current_episode$episode_length_seconds
# Process Trump and Harris airtime
trump_segments <- process_timestamps(current_episode$`trump air time stamps`, "Trump")
harris_segments <- process_timestamps(current_episode$`harris air time stamps`, "Harris")
# Combine the segments into one dataframe
all_segments <- rbind(trump_segments, harris_segments)
# Create the visualization for this episode
episode_plot <- ggplot() +
# Draw the full episode bar (grey)
geom_rect(aes(xmin = 0, xmax = episode_length, ymin = 0, ymax = 1),
fill = "grey90", color = "black", size = 0.3) +
# Highlight Trump's airtime (top half of the bar)
geom_rect(
data = filter(all_segments, candidate == "Trump"),
aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1),
fill = "red", alpha = 0.8
) +
# Highlight Harris's airtime (bottom half of the bar)
geom_rect(
data = filter(all_segments, candidate == "Harris"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5),
fill = "blue", alpha = 0.8
) +
# Add tick marks for every minute and every 15 seconds
scale_x_continuous(
breaks = seq(0, episode_length, by = 60),  # Tick marks every minute
minor_breaks = seq(0, episode_length, by = 15),  # Minor tick marks every 15 seconds
labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)  # Format as mm:ss
) +
# Add labels
labs(
title = paste(episode_title),
x = NULL,
y = NULL
) +
theme_minimal() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey80", size = 0.3),
panel.grid.minor.x = element_line(color = "grey90", size = 0.2),
plot.title = element_text(size = 10),
axis.text.x = element_text(size = 7, color = "black")
)
# Add this plot to our list
episode_plots[[i]] <- episode_plot
}
# Install and load the patchwork package if not already installed
if (!require("patchwork")) {
install.packages("patchwork")
library(patchwork)
}
# Combine all plots into one visualization
# Using the + operator from patchwork to stack the plots vertically
combined_plot <- episode_plots[[1]]
for (i in 2:length(episode_plots)) {
combined_plot <- combined_plot / episode_plots[[i]]
}
# Add an overall title
combined_plot <- combined_plot +
plot_annotation(
title = "SNL Airtime Visualization for All Episodes",
subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
theme = theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5)
)
)
# Print the combined visualization
print(combined_plot)
# Create a list to store all the individual episode plots
episode_plots <- list()
# Loop through all episodes
for (i in 1:nrow(snl_airtime_processed)) {
# Get current episode data
current_episode <- snl_airtime_processed[i, ]
episode_title <- current_episode$show
episode_length <- current_episode$episode_length_seconds
# Process Trump and Harris airtime
trump_segments <- process_timestamps(current_episode$`trump air time stamps`, "Trump")
harris_segments <- process_timestamps(current_episode$`harris air time stamps`, "Harris")
# Combine the segments into one dataframe - USE A DIFFERENT VARIABLE NAME HERE
episode_segments <- rbind(trump_segments, harris_segments)
# Create the visualization for this episode
episode_plot <- ggplot() +
# Draw the full episode bar (grey)
geom_rect(aes(xmin = 0, xmax = episode_length, ymin = 0, ymax = 1),
fill = "grey90", color = "black", size = 0.3) +
# Highlight Trump's airtime (top half of the bar)
geom_rect(
data = filter(episode_segments, candidate == "Trump"),
aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1),
fill = "red", alpha = 0.8
) +
# Highlight Harris's airtime (bottom half of the bar)
geom_rect(
data = filter(episode_segments, candidate == "Harris"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5),
fill = "blue", alpha = 0.8
) +
# Add tick marks for every minute and every 15 seconds
scale_x_continuous(
breaks = seq(0, episode_length, by = 60),  # Tick marks every minute
minor_breaks = seq(0, episode_length, by = 15),  # Minor tick marks every 15 seconds
labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)  # Format as mm:ss
) +
# Add labels
labs(
title = paste(episode_title),
x = NULL,
y = NULL
) +
theme_minimal() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey80", size = 0.3),
panel.grid.minor.x = element_line(color = "grey90", size = 0.2),
plot.title = element_text(size = 10),
axis.text.x = element_text(size = 7, color = "black")
)
# Debug: Print info about this episode
cat(paste("Episode:", episode_title, "\n"))
cat(paste("Trump segments:", nrow(filter(episode_segments, candidate == "Trump")), "\n"))
cat(paste("Harris segments:", nrow(filter(episode_segments, candidate == "Harris")), "\n"))
# Add this plot to our list
episode_plots[[i]] <- episode_plot
}
# Combine all plots into one visualization
# Using the + operator from patchwork to stack the plots vertically
combined_plot <- episode_plots[[1]]
for (i in 2:length(episode_plots)) {
combined_plot <- combined_plot / episode_plots[[i]]
}
# Add an overall title
combined_plot <- combined_plot +
plot_annotation(
title = "SNL Airtime Visualization for All Episodes",
subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
theme = theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5)
)
)
# Print the combined visualization
print(combined_plot)
# Save the visualization to a PDF for better viewing
ggsave("all_snl_episodes.pdf", combined_plot, width = 11, height = length(episode_plots)*1.2, limitsize = FALSE)
# Step 1: Process all episodes
all_segments <- data.frame(
start = numeric(0),
end = numeric(0),
candidate = character(0),
episode = character(0),
stringsAsFactors = FALSE
)
for (i in 1:nrow(snl_airtime_processed)) {
episode <- snl_airtime_processed[i, ]
episode_title <- as.character(episode$show)
episode_length <- episode$episode_length_seconds
# Process Trump and Harris airtime
trump_segments <- process_timestamps(episode$`trump air time stamps`, "Trump")
harris_segments <- process_timestamps(episode$`harris air time stamps`, "Harris")
# Add episode title to each segment
if (nrow(trump_segments) > 0) {
trump_segments$episode <- episode_title
all_segments <- rbind(all_segments, trump_segments)
}
if (nrow(harris_segments) > 0) {
harris_segments$episode <- episode_title
all_segments <- rbind(all_segments, harris_segments)
}
}
# Verify we have data in all_segments
print(paste("Number of rows in all_segments:", nrow(all_segments)))
print(head(all_segments))
# Check for any episodes with no segments
episodes_with_segments <- unique(all_segments$episode)
all_episodes <- unique(snl_airtime_processed$show)
missing_episodes <- setdiff(all_episodes, episodes_with_segments)
print(paste("Episodes with no segments:", paste(missing_episodes, collapse=", ")))
# Create a data frame for grey bars with exactly the same episode names
episode_bars <- snl_airtime_processed %>%
select(show, episode_length_seconds) %>%
rename(episode = show)
# Step 2: Create the faceted visualization with debugging - FIXED VERSION
all_episodes_vis <- ggplot() +
# Draw the full episode bar (grey) for all episodes
geom_rect(
data = episode_bars,
aes(xmin = 0, xmax = episode_length_seconds, ymin = 0, ymax = 1, group = episode),
fill = "grey90", color = "black", size = 0.3
) +
# Add Trump segments with more explicit mapping
geom_rect(
data = filter(all_segments, candidate == "Trump"),
aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1, group = episode),
fill = "red", color = "darkred", alpha = 0.8, size = 0.5
) +
# Add Harris segments with more explicit mapping
geom_rect(
data = filter(all_segments, candidate == "Harris"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5, group = episode),
fill = "blue", color = "darkblue", alpha = 0.8, size = 0.5
) +
# Add tick marks - keep scales consistent
scale_x_continuous(
breaks = seq(0, max(episode_bars$episode_length_seconds), by = 60),
minor_breaks = seq(0, max(episode_bars$episode_length_seconds), by = 15),
labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)
) +
# Force a more explicit interaction between facets and data
facet_wrap(~ episode, ncol = 1, scales = "free_x", drop = FALSE) +
# Rest of your code stays the same
labs(
title = "SNL Airtime Visualization for All Episodes",
subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
x = "Time (minutes:seconds)",
y = NULL
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey80", size = 0.3),
panel.grid.minor.x = element_line(color = "grey90", size = 0.2),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(size = 10, color = "black")
)
# Step 3: Print the visualization
print(all_episodes_vis)
ggsave(
"snl_airtime_faceted.pdf",
all_episodes_vis,
width = 12,
height = 24,
limitsize = FALSE
)
