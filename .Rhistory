filter(mentioned_by != "None") %>%  # Exclude rows where no candidate was mentioned
group_by(topic, mentioned_by) %>%
summarize(total_mentions = n(), .groups = "drop")
#to put "both" in the middle
total_mentions <- total_mentions %>%
mutate(
mentioned_by = factor(mentioned_by, levels = c("Trump", "Both", "Harris"))
)
# Create the stacked bar chart
stacked_bar_chart <- ggplot(total_mentions, aes(x = topic, y = total_mentions, fill = mentioned_by)) +
geom_bar(stat = "identity", position = "stack", alpha = 0.9) +
scale_fill_manual(values = c("Trump" = "red", "Harris" = "blue", "Both" = "purple")) +
labs(
title = "Total Mentions of 2024 Election Topics by Candidate",
subtitle = "Aggregated across SNL, TLS, and LWT",
x = "Topic",
y = "Total Mentions",
fill = "Candidate"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5)
)
# Print the chart
print(stacked_bar_chart)
# Save the chart
ggsave("total_mentions_by_topic.png", plot = stacked_bar_chart, width = 12, height = 8, dpi = 300)
# Combine all heatmap dataframes into one
combined_topics <- bind_rows(
snl_heatmap_data %>%
select(show, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "SNL"),
tls_heatmap_data %>%
select(show, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "TLS"),
lwt_heatmap_data %>%
select(show, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "LWT"),
tds_heatmap_data %>%
select(show, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "TDS")
)
# Group by topic and candidate, and count mentions
total_mentions <- combined_topics %>%
filter(mentioned_by != "None") %>%  # Exclude rows where no candidate was mentioned
group_by(topic, mentioned_by) %>%
summarize(total_mentions = n(), .groups = "drop")
#to put "both" in the middle
total_mentions <- total_mentions %>%
mutate(
mentioned_by = factor(mentioned_by, levels = c("Trump", "Both", "Harris"))
)
# Create the stacked bar chart
stacked_bar_chart <- ggplot(total_mentions, aes(x = topic, y = total_mentions, fill = mentioned_by)) +
geom_bar(stat = "identity", position = "stack", alpha = 0.9) +
scale_fill_manual(values = c("Trump" = "red", "Harris" = "blue", "Both" = "purple")) +
labs(
title = "Total Mentions of 2024 Election Topics by Candidate",
subtitle = "Aggregated across SNL, TLS, LWT, & TDS",
x = "Topic",
y = "Total Mentions",
fill = "Candidate"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5)
)
# Print the chart
print(stacked_bar_chart)
# Save the chart
ggsave("total_mentions_by_topic.png", plot = stacked_bar_chart, width = 12, height = 8, dpi = 300)
#these are for the date based topic visualizations
# Ensure the `date` column is in Date format for all heatmap dataframes
snl_heatmap_data <- snl_heatmap_data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))  # Adjust the format if needed
tls_heatmap_data <- tls_heatmap_data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))  # Adjust the format if needed
lwt_heatmap_data <- lwt_heatmap_data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))  # Adjust the format if needed
combined_topics_with_dates <- bind_rows(
snl_heatmap_data %>%
select(show, date, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "SNL"),
tls_heatmap_data %>%
select(show, date, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "TLS"),
lwt_heatmap_data %>%
select(show, date, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "LWT"),
tds_heatmap_data %>%
select(show, date, economics, reproductive_rights, immigration) %>%
pivot_longer(cols = c(economics, reproductive_rights, immigration), names_to = "topic", values_to = "mentioned_by") %>%
mutate(show = "TDS"),
)
# Filter out rows where no candidate was mentioned
combined_topics_with_dates <- combined_topics_with_dates %>%
filter(mentioned_by != "None")
# Group by date, topic, and candidate, and count mentions
mentions_over_time <- combined_topics_with_dates %>%
group_by(date, topic, mentioned_by) %>%
summarize(total_mentions = n(), .groups = "drop")
# Step 1: Adjust the data to handle "Both" by duplicating rows
mentions_adjusted <- mentions_over_time %>%
mutate(mentioned_by = ifelse(mentioned_by == "Both", "Trump", mentioned_by)) %>%
bind_rows(
mentions_over_time %>%
filter(mentioned_by == "Both") %>%
mutate(mentioned_by = "Harris")
)
# Step 2: Group by date, topic, and candidate, and recalculate total mentions
mentions_adjusted <- mentions_adjusted %>%
group_by(date, topic, mentioned_by) %>%
summarize(total_mentions = sum(total_mentions), .groups = "drop")
# Step 3: Expand the data to include all dates for each topic and candidate
all_dates <- seq(min(mentions_adjusted$date), max(mentions_adjusted$date), by = "day")
mentions_expanded <- mentions_adjusted %>%
group_by(topic, mentioned_by) %>%
complete(date = all_dates, fill = list(total_mentions = 0)) %>%  # Fill missing dates with 0 mentions
arrange(date) %>%
ungroup()
# Step 4: Calculate cumulative mentions for each candidate over time
mentions_cumulative <- mentions_expanded %>%
group_by(topic, mentioned_by) %>%
mutate(cumulative_mentions = cumsum(total_mentions)) %>%
ungroup()
# Step 5: Reorder the `mentioned_by` factor to bring Harris (blue) to the front
mentions_cumulative <- mentions_cumulative %>%
mutate(mentioned_by = factor(mentioned_by, levels = c("Trump", "Harris")))
# Step 6: Create the cumulative area chart
cumulative_area_chart <- ggplot(mentions_cumulative, aes(x = date, y = cumulative_mentions, fill = mentioned_by)) +
geom_area(alpha = 0.7, position = "identity") +  # Use position = "identity" for overlapping areas
facet_wrap(~ topic, ncol = 1) +
scale_fill_manual(values = c("Trump" = "red", "Harris" = "blue")) +  # Red and blue will blend into purple
labs(
title = "Cumulative Mentions of Election Topics Over Time",
subtitle = "Overlapping Areas Highlight Shared Mentions Across SNL, TLS, LWT, and TDS",
x = "Date",
y = "Cumulative Mentions",
fill = "Candidate"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", size = 16),
strip.text.x = element_text(face = "bold", size = 12),
panel.background = element_rect(fill = "white", color = NA),  # White background
plot.background = element_rect(fill = "white", color = NA)   # White background for the entire plot
)
# Step 7: Print the chart
print(cumulative_area_chart)
# Step 8: Save the chart
ggsave("cumulative_mentions_over_time.png", plot = cumulative_area_chart, width = 12, height = 8, dpi = 300)
# Step 1: Adjust the data to handle "Both" by duplicating rows
mentions_adjusted <- mentions_over_time %>%
mutate(mentioned_by = ifelse(mentioned_by == "Both", "Trump", mentioned_by)) %>%
bind_rows(
mentions_over_time %>%
filter(mentioned_by == "Both") %>%
mutate(mentioned_by = "Harris")
)
# Step 2: Group by date, topic, and candidate, and recalculate total mentions
mentions_adjusted <- mentions_adjusted %>%
group_by(date, topic, mentioned_by) %>%
summarize(total_mentions = sum(total_mentions), .groups = "drop")
# Step 3: Expand the data to include all dates for each topic and candidate
all_dates <- seq(min(mentions_adjusted$date), max(mentions_adjusted$date), by = "day")
mentions_expanded <- mentions_adjusted %>%
group_by(topic, mentioned_by) %>%
complete(date = all_dates, fill = list(total_mentions = 0)) %>%  # Fill missing dates with 0 mentions
arrange(date) %>%
ungroup()
# Step 4: Calculate cumulative mentions for each candidate over time
mentions_cumulative <- mentions_expanded %>%
group_by(topic, mentioned_by) %>%
mutate(cumulative_mentions = cumsum(total_mentions)) %>%
ungroup()
# Step 5: Reorder the `mentioned_by` factor to bring Harris (blue) to the front
mentions_cumulative <- mentions_cumulative %>%
mutate(mentioned_by = factor(mentioned_by, levels = c("Trump", "Harris")))
# Step 6: Create the cumulative area chart
cumulative_area_chart <- ggplot(mentions_cumulative, aes(x = date, y = cumulative_mentions, fill = mentioned_by)) +
geom_area(alpha = 0.7, position = "identity") +  # Use position = "identity" for overlapping areas
facet_wrap(~ topic, ncol = 1) +
scale_fill_manual(values = c("Trump" = "red", "Harris" = "blue")) +  # Red and blue will blend into purple
labs(
title = "Cumulative Mentions of Election Topics Over Time",
subtitle = "Overlapping Areas Highlight Shared Mentions by Trump and Harris Across All Analyzed Shows",
x = "Date",
y = "Cumulative Mentions",
fill = "Candidate"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", size = 16),
strip.text.x = element_text(face = "bold", size = 12),
panel.background = element_rect(fill = "white", color = NA),  # White background
plot.background = element_rect(fill = "white", color = NA)   # White background for the entire plot
)
# Step 7: Print the chart
print(cumulative_area_chart)
# Step 8: Save the chart
ggsave("cumulative_mentions_over_time.png", plot = cumulative_area_chart, width = 12, height = 8, dpi = 300)
# Step 1: Prepare the cumulative mentions data for all topics
mentions_cumulative_all_topics <- mentions_cumulative %>%
group_by(date, mentioned_by) %>%
summarize(cumulative_mentions = sum(cumulative_mentions), .groups = "drop")
# Step 2: Prepare the cumulative airtime data
airtime_cumulative <- combined_airtime %>%
group_by(date) %>%
summarize(
trump_airtime = cumsum(total_trump_airtime_seconds),
harris_airtime = cumsum(total_harris_airtime_seconds),
.groups = "drop"
) %>%
pivot_longer(
cols = c(trump_airtime, harris_airtime),
names_to = "mentioned_by",
values_to = "cumulative_airtime"
) %>%
mutate(
mentioned_by = recode(mentioned_by,
"trump_airtime" = "Trump",
"harris_airtime" = "Harris")
)
# Step 3: Combine mentions and airtime data
combined_cumulative <- mentions_cumulative_all_topics %>%
left_join(
airtime_cumulative,
by = c("date", "mentioned_by")
) %>%
pivot_longer(
cols = c(cumulative_mentions, cumulative_airtime),
names_to = "metric",
values_to = "value"
)
# Step 1: Prepare cumulative airtime data
airtime_cumulative <- combined_airtime %>%
arrange(date) %>%
group_by(date) %>%
summarize(
trump_airtime_cumulative = sum(total_trump_airtime_seconds, na.rm = TRUE),
harris_airtime_cumulative = sum(total_harris_airtime_seconds, na.rm = TRUE),
.groups = "drop"
) %>%
# Get cumulative sums across all dates
mutate(
trump_airtime_cumulative = cumsum(trump_airtime_cumulative),
harris_airtime_cumulative = cumsum(harris_airtime_cumulative)
)
# Step 2: Prepare cumulative mentions data (aggregated across all topics)
mentions_cumulative_all_topics <- mentions_cumulative %>%
group_by(date, mentioned_by) %>%
summarize(cumulative_mentions = sum(cumulative_mentions), .groups = "drop")
# Step 3: Combine datasets for plotting
combined_data <- airtime_cumulative %>%
left_join(
mentions_cumulative_all_topics %>%
pivot_wider(
names_from = mentioned_by,
values_from = cumulative_mentions,
names_prefix = "mentions_"
),
by = "date"
)
# Step 4: Plot
ggplot(combined_data, aes(x = date)) +
# Cumulative Airtime
geom_line(aes(y = trump_airtime_cumulative, color = "Trump Airtime"), linewidth = 1.3) +
geom_line(aes(y = harris_airtime_cumulative, color = "Harris Airtime"), linewidth = 1.3) +
# Cumulative Mentions (rescaled)
geom_line(aes(y = mentions_Trump * 60, color = "Trump Mentions"), linetype = "dashed", linewidth = 1.1) +
geom_line(aes(y = mentions_Harris * 60, color = "Harris Mentions"), linetype = "dashed", linewidth = 1.1) +
# Election Day reference line
geom_vline(xintercept = as.Date("2024-11-05"), linetype = "dotted", color = "black", linewidth = 0.8) +
annotate("text", x = as.Date("2024-11-05"), y = max(combined_data$trump_airtime_cumulative, na.rm = TRUE) * 0.95,
label = "Election Day", angle = 90, vjust = -0.5, size = 4) +
# Axis + color scales
scale_y_continuous(
name = "Cumulative Airtime (seconds)",
sec.axis = sec_axis(~./60, name = "Cumulative Topic Mentions")
) +
scale_color_manual(
name = NULL,
values = c(
"Trump Airtime" = "#B22222",
"Harris Airtime" = "#1E3A8A",
"Trump Mentions" = "#FA8072",
"Harris Mentions" = "#6495ED"
)
) +
# Labels + theme
labs(
title = "Candidate Airtime vs. Topic Mentions Over Time",
subtitle = "Solid lines = Airtime (left axis) · Dashed lines = Topic Mentions (right axis)",
x = "Date"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 13, hjust = 0.5),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA)
)
# Save the plot
ggsave("airtime_vs_mentions_over_time_pretty.png", width = 12, height = 8, dpi = 300)
# Create the stacked area chart
ggplot(combined_data, aes(x = date)) +
# Stacked area for cumulative airtime
geom_area(aes(y = trump_airtime_cumulative, fill = "Trump Airtime"), position = "stack", alpha = 0.3) +
geom_area(aes(y = harris_airtime_cumulative, fill = "Harris Airtime"), position = "stack", alpha = 0.3) +
# Dashed lines for cumulative mentions (scaled for visual comparison)
geom_line(aes(y = mentions_Trump * 60, color = "Trump Mentions"),
linetype = "dashed", linewidth = 1.2) +
geom_line(aes(y = mentions_Harris * 60, color = "Harris Mentions"),
linetype = "dashed", linewidth = 1.2) +
# Election Day marker
geom_vline(xintercept = as.Date("2024-11-05"),
linetype = "longdash", color = "black", linewidth = 0.7) +
annotate("text", x = as.Date("2024-11-05"),
y = max(combined_data$trump_airtime_cumulative + combined_data$harris_airtime_cumulative, na.rm = TRUE) * 0.9,
label = "Election Day", angle = 90, hjust = -0.2, size = 4) +
# Color scales
scale_fill_manual(
name = "Airtime (Area)",
values = c("Trump Airtime" = "red", "Harris Airtime" = "blue")
) +
scale_color_manual(
name = "Mentions (Line)",
values = c("Trump Mentions" = "darkred", "Harris Mentions" = "darkblue")
) +
# Y-axis with secondary axis for mentions
scale_y_continuous(
name = "Cumulative Airtime (seconds)",
sec.axis = sec_axis(~./60, name = "Cumulative Topic Mentions")
) +
# Labels and styling
labs(
title = "Stacked Cumulative Airtime vs. Topic Mentions Over Time",
subtitle = "Stacked areas show total airtime; dashed lines show topic mentions",
x = "Date"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
legend.box = "vertical",
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA)
)
# Save the plot
ggsave("stacked_cumulative_airtime_mentions_timeline.png", width = 12, height = 8, dpi = 300)
# Combine all processed airtime dataframes into one
election_combined_airtime <- bind_rows(
snl_airtime_processed %>%
select(date, total_trump_airtime_seconds, total_harris_airtime_seconds) %>%
mutate(show = "SNL"),
tls_airtime_processed %>%
select(date, total_trump_airtime_seconds, total_harris_airtime_seconds) %>%
mutate(show = "TLS"),
LWT_airtime_processed %>%
select(date, total_trump_airtime_seconds, total_harris_airtime_seconds) %>%
mutate(show = "LWT"),
tds_airtime_processed %>%
select(date, total_trump_airtime_seconds, total_harris_airtime_seconds) %>%
mutate(show = "TDS")
)
# Define the election date
election_date <- as.Date("2024-11-05")
election_week <- as.Date("2024-11-05")
election_week_floor <- floor_date(election_week, "week")
# this would make the data cut off at election day
#election_combined_airtime <- election_combined_airtime %>%
#filter(date <= election_date)
# Group by week and calculate total airtime for each candidate
election_weekly_airtime <- election_combined_airtime %>%
mutate(week = floor_date(date, "week")) %>%  # Group by week
group_by(week, show) %>%
summarize(
total_trump_airtime_seconds = sum(total_trump_airtime_seconds, na.rm = TRUE),
total_harris_airtime_seconds = sum(total_harris_airtime_seconds, na.rm = TRUE),
.groups = "drop"
)
# Calculate percentage of airtime for each candidate
election_weekly_percentages <- election_weekly_airtime %>%
mutate(
total_candidate_airtime_seconds = total_trump_airtime_seconds + total_harris_airtime_seconds,
percent_harris = ifelse(total_candidate_airtime_seconds > 0,
(total_harris_airtime_seconds / total_candidate_airtime_seconds) * 100,
NA),
percent_trump = 100 - percent_harris  # Remaining percentage for Trump
) %>%
select(week, show, percent_harris, percent_trump)
# Combine into one row per week with both candidate shares
election_average_weekly_percentages <- election_weekly_percentages %>%
group_by(week) %>%
summarize(
avg_percent_harris = mean(percent_harris, na.rm = TRUE),
avg_percent_trump = mean(percent_trump, na.rm = TRUE),
.groups = "drop"
) %>%
pivot_longer(
cols = c(avg_percent_harris, avg_percent_trump),
names_to = "candidate",
values_to = "percentage"
) %>%
mutate(
candidate = recode(candidate,
"avg_percent_harris" = "Harris",
"avg_percent_trump" = "Trump")
)
# Convert weeks to factor in the same order used in the plot
week_levels <- sort(unique(election_average_weekly_percentages$week), decreasing = TRUE)
election_week_index <- which(week_levels == election_week_floor)
# Now plot with a horizontal line at that Y-position
election_airtime_by_week <- ggplot(election_average_weekly_percentages, aes(x = percentage, y = fct_rev(as.factor(week)), fill = candidate)) +
geom_col(position = "stack", alpha = 0.9) +
geom_hline(yintercept = election_week_index, linetype = "dashed", color = "black", size = 1) +  # Election Day line
annotate("text", x = 100, y = election_week_index, label = "Election Day", hjust = 0, vjust = -0.5, size = 4, color = "black") +
scale_x_continuous(labels = function(x) paste0(x, "%"), limits = c(0, 100)) +
labs(
title = "Weekly Distribution of Airtime Between Trump and Harris before the 2024 Election",
subtitle = "Averaged across Saturday Night Live, The Late Show, Last Week Tonight, and The Daily Show",
x = "Share of Candidate Airtime",
y = "Week"
) +
scale_fill_manual(values = c("Trump" = "red", "Harris" = "blue")) +
theme_minimal(base_size = 14) +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5)
) + coord_cartesian(clip = "off")
# Print the plot
print(election_airtime_by_week)
ggsave(
filename = "election_weekly_airtime_distribution.png",
plot = election_airtime_by_week,
width = 12,
height = 8,
dpi = 300
)
# Create a grouped bar chart
grouped_bar_chart <- ggplot(total_mentions, aes(x = topic, y = total_mentions, fill = mentioned_by)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), alpha = 0.9) +
scale_fill_manual(values = c("Trump" = "red", "Harris" = "blue", "Both" = "purple")) +
labs(
title = "Mentions of 2024 Election Topics by Candidate",
subtitle = "Aggregated across SNL, TLS, and LWT",
x = "Topic",
y = "Total Mentions",
fill = "Candidate"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5)
)
# Print the chart
print(grouped_bar_chart)
# Save the chart
ggsave("grouped_mentions_by_topic.png", plot = grouped_bar_chart, width = 12, height = 8, dpi = 300)
# first, preliminary pie chart of gender breakdown of hosts being male of female for tds
tds_host_gender <- tds_topics %>%
mutate(Gender_Category = case_when(
grepl("female", `Gender of Host`, ignore.case = TRUE) ~ "Female",
grepl("male", `Gender of Host`, ignore.case = TRUE) ~ "Male",
TRUE ~ "Other/Unknown"
)) %>%
count(Gender_Category)
# Make a pie chart
ggplot(tds_host_gender, aes(x = "", y = n, fill = Gender_Category)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
labs(title = "Gender Breakdown of Hosts on TDS",
fill = "Host Gender") +
theme_void()
# Categorize host gender
tds_host_gender <- tds_topics %>%
mutate(Gender_Category = case_when(
grepl("^female$", `Gender of Host`, ignore.case = TRUE) ~ "Female",
grepl("^male$|mostly male", `Gender of Host`, ignore.case = TRUE) ~ "Male",
TRUE ~ "Other"
)) %>%
count(Gender_Category)
# Create pie chart
ggplot(tds_host_gender, aes(x = "", y = n, fill = Gender_Category)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
labs(title = "Gender Breakdown of Hosts on TDS",
fill = "Host Gender") +
theme_void()
View(tds_host_gender)
