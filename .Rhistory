geom_rect(
data = filter(all_segments, candidate == "Trump"),
aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1, group = episode),
fill = "red", alpha = 0.8
) +
# Add Harris segments
geom_rect(
data = filter(all_segments, candidate == "Harris"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5, group = episode),
fill = "blue", alpha = 0.8
) +
# Add tick marks for every minute and every 15 seconds
scale_x_continuous(
breaks = seq(0, max(episode_bars$episode_length_seconds), by = 60),
minor_breaks = seq(0, max(episode_bars$episode_length_seconds), by = 15),
labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)
) +
# Facet by episode, in air-date order
facet_wrap(~ episode, ncol = 1, scales = "free_x") +
# Add labels and theme
labs(
title = "SNL Airtime Visualization for All Episodes",
subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
x = "Time (minutes:seconds)",
y = NULL
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(face = "bold", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey80", size = 0.3),
panel.grid.minor.x = element_line(color = "grey90", size = 0.2),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(size = 10, color = "black")
)
# --- Step 5: Save the visualization ---
ggsave(
"snl_airtime_faceted_sorted_by_date_again.pdf",
all_episodes_vis,
width = 12,
height = 24,
limitsize = FALSE
)
# Optional: View first few episodes
head(episode_bars)
# --- Ensure dates are properly formatted ---
snl_airtime_processed <- snl_airtime_processed %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))  # Adjust format if needed
# --- Step 1: Process all episodes into segments ---
all_segments <- data.frame(
start = numeric(0),
end = numeric(0),
candidate = character(0),
episode = character(0),
stringsAsFactors = FALSE
)
for (i in 1:nrow(snl_airtime_processed)) {
episode <- snl_airtime_processed[i, ]
episode_title <- paste0(
str_remove(episode$show, "SNL "),
" (", format(episode$date, "%b %d, %Y"), ")"
)
# Process Trump and Harris airtime
trump_segments <- process_timestamps(episode$`trump air time stamps`, "Trump")
harris_segments <- process_timestamps(episode$`harris air time stamps`, "Harris")
# Add episode title to each segment
if (nrow(trump_segments) > 0) {
trump_segments$episode <- episode_title
all_segments <- rbind(all_segments, trump_segments)
}
if (nrow(harris_segments) > 0) {
harris_segments$episode <- episode_title
all_segments <- rbind(all_segments, harris_segments)
}
}
# --- Step 2: Create the episode_bars dataframe ---
episode_bars <- snl_airtime_processed %>%
mutate(
episode = paste0(
str_remove(show, "SNL "),
" (", format(date, "%b %d, %Y"), ")"
)
) %>%
select(episode, episode_length_seconds, date) %>%
arrange(date)  # Sort by air date
# Set episode factor levels in order of air date
episode_bars <- episode_bars %>%
mutate(episode = factor(episode, levels = episode))
# --- Step 3: Join air dates into all_segments for plotting ---
all_segments <- all_segments %>%
left_join(
episode_bars %>% select(episode, date),
by = "episode"
) %>%
arrange(date)
# --- Step 4: Create the faceted visualization ---
all_episodes_vis <- ggplot() +
# Draw the full episode bar (grey) for all episodes
geom_rect(
data = episode_bars,
aes(xmin = 0, xmax = episode_length_seconds, ymin = 0, ymax = 1, group = episode),
fill = "grey90", color = "black", size = 0.3
) +
# Add Trump segments
geom_rect(
data = filter(all_segments, candidate == "Trump"),
aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1, group = episode),
fill = "red", alpha = 0.8
) +
# Add Harris segments
geom_rect(
data = filter(all_segments, candidate == "Harris"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5, group = episode),
fill = "blue", alpha = 0.8
) +
# Add tick marks for every minute and every 15 seconds
scale_x_continuous(
breaks = seq(0, max(episode_bars$episode_length_seconds), by = 60),
minor_breaks = seq(0, max(episode_bars$episode_length_seconds), by = 15),
labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)
) +
# Facet by episode, in air-date order
facet_wrap(~ episode, ncol = 1, scales = "free_x") +
# Add labels and theme
labs(
title = "SNL Airtime Visualization for All Episodes",
subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
x = "Time (minutes:seconds)",
y = NULL
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(face = "bold", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey80", size = 0.3),
panel.grid.minor.x = element_line(color = "grey90", size = 0.2),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(size = 10, color = "black")
)
# --- Step 5: Save the visualization ---
ggsave(
"snl_airtime_faceted_sorted_by_date_again_3pm.pdf",
all_episodes_vis,
width = 12,
height = 24,
limitsize = FALSE
)
# Optional: View first few episodes
head(episode_bars)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
library(hms)
library(readr)
library(readxl)
library(patchwork)
snl_airtime <- read_csv("data/snl-airtime.csv")
View(snl_airtime)
#read in other chart for topic analysis
snl_topics <- read_excel("data/SNL-topics.xlsx")
View(snl_topics)
class(snl_airtime$`harris air time stamps`)
# cleaning the data to capture total airtime for Trump & Harris
# Function to calculate duration from timestamp ranges
calculate_duration <- function(time_range) {
if (is.na(time_range) || time_range == "none" || time_range == "") return(0)
# Process multiple ranges separated by "and"
ranges <- unlist(strsplit(time_range, " and "))
total_seconds <- 0
for (range in ranges) {
# Split start and end times
times <- unlist(strsplit(range, "-"))
if (length(times) != 2) next
# Convert start time to seconds
start_parts <- as.numeric(unlist(strsplit(times[1], ":")))
start_seconds <- if (length(start_parts) == 2) start_parts[1] * 60 + start_parts[2] else start_parts[1]
# Convert end time to seconds
end_parts <- as.numeric(unlist(strsplit(times[2], ":")))
end_seconds <- if (length(end_parts) == 2) end_parts[1] * 60 + end_parts[2] else end_parts[1]
# Add duration to total
total_seconds <- total_seconds + (end_seconds - start_seconds)
}
return(total_seconds)
}
# Function to process timestamps into a dataframe of start and end times
process_timestamps <- function(timestamps, candidate) {
if (is.na(timestamps) || timestamps == "none" || timestamps == "") {
# Return an empty dataframe with the correct structure
return(data.frame(start = numeric(0), end = numeric(0), candidate = character(0)))
}
# Split the timestamps by "and" to handle multiple ranges
ranges <- unlist(strsplit(timestamps, " and "))
segments <- data.frame()
for (range in ranges) {
# Split each range into start and end times
times <- unlist(strsplit(range, "-"))
if (length(times) != 2) next
# Convert start and end times to seconds
start_parts <- as.numeric(unlist(strsplit(times[1], ":")))
start_seconds <- if (length(start_parts) == 2) start_parts[1] * 60 + start_parts[2] else start_parts[1]
end_parts <- as.numeric(unlist(strsplit(times[2], ":")))
end_seconds <- if (length(end_parts) == 2) end_parts[1] * 60 + end_parts[2] else end_parts[1]
# Add the segment to the dataframe
segment <- data.frame(
start = start_seconds,
end = end_seconds,
candidate = candidate
)
segments <- rbind(segments, segment)
}
return(segments)
}
# Create expanded dataset with duration calculations while keeping original data
snl_airtime_processed <- snl_airtime %>%
mutate(
# Calculate total airtime in seconds
total_trump_airtime_seconds = sapply(`trump air time stamps`, calculate_duration),
total_harris_airtime_seconds = sapply(`harris air time stamps`, calculate_duration),
# Convert to minutes for easier interpretation
total_trump_airtime_minutes = round(total_trump_airtime_seconds / 60, 2),
total_harris_airtime_minutes = round(total_harris_airtime_seconds / 60, 2)
)
# Update the processed dataframe to correctly parse "run time (total)" as MM:SS
snl_airtime_processed <- snl_airtime_processed %>%
mutate(
# Convert "run time (total)" from MM:SS to total seconds
episode_length_seconds = sapply(`run time (total)`, function(runtime) {
time_parts <- unlist(strsplit(as.character(runtime), ":"))
as.numeric(time_parts[1]) * 60 + as.numeric(time_parts[2])
})
)
# Example: Process the first episode
first_episode <- snl_airtime_processed[1, ]  # Get the first episode
episode_title <- first_episode$show
episode_length <- first_episode$episode_length_seconds  # Use the parsed episode length
# Process Trump and Harris airtime
trump_segments <- process_timestamps(first_episode$`trump air time stamps`, "Trump")
harris_segments <- process_timestamps(first_episode$`harris air time stamps`, "Harris")
# Combine the segments into one dataframe
all_segments <- rbind(trump_segments, harris_segments)
# Create the visualization
airtime_per_candidate_vis <- ggplot() +
# Draw the full episode bar (grey)
geom_rect(aes(xmin = 0, xmax = episode_length, ymin = 0, ymax = 1), fill = "grey90", color = "black", size = 0.3) +
# Highlight Trump's airtime (top half of the bar)
geom_rect(
data = filter(all_segments, candidate == "Trump"),
aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1),
fill = "red", alpha = 0.8
) +
# Highlight Harris's airtime (bottom half of the bar)
geom_rect(
data = filter(all_segments, candidate == "Harris"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5),
fill = "blue", alpha = 0.8
) +
# Add tick marks for every minute and every 15 seconds
scale_x_continuous(
breaks = seq(0, episode_length, by = 60),  # Tick marks every minute
minor_breaks = seq(0, episode_length, by = 15),  # Minor tick marks every 15 seconds
labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)  # Format as mm:ss
) +
# Add labels and theme
labs(
title = paste(episode_title),
subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
x = "Time (minutes:seconds)",
y = NULL
) +
theme_minimal(base_size = 14) +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey80", size = 0.3),
panel.grid.minor.x = element_line(color = "grey90", size = 0.2),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(size = 10, color = "black")
)
# Print the visualization
airtime_per_candidate_vis
# --- Ensure dates are properly formatted ---
snl_airtime_processed <- snl_airtime_processed %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))  # Adjust format if needed
# --- Step 1: Process all episodes into segments ---
all_segments <- data.frame(
start = numeric(0),
end = numeric(0),
candidate = character(0),
episode = character(0),
stringsAsFactors = FALSE
)
for (i in 1:nrow(snl_airtime_processed)) {
episode <- snl_airtime_processed[i, ]
episode_title <- paste0(
str_remove(episode$show, "SNL "),
" (", format(episode$date, "%b %d, %Y"), ")"
)
# Process Trump and Harris airtime
trump_segments <- process_timestamps(episode$`trump air time stamps`, "Trump")
harris_segments <- process_timestamps(episode$`harris air time stamps`, "Harris")
# Add episode title to each segment
if (nrow(trump_segments) > 0) {
trump_segments$episode <- episode_title
all_segments <- rbind(all_segments, trump_segments)
}
if (nrow(harris_segments) > 0) {
harris_segments$episode <- episode_title
all_segments <- rbind(all_segments, harris_segments)
}
}
# --- Step 2: Create the episode_bars dataframe ---
episode_bars <- snl_airtime_processed %>%
mutate(
episode = paste0(
str_remove(show, "SNL "),
" (", format(date, "%b %d, %Y"), ")"
)
) %>%
select(episode, episode_length_seconds, date) %>%
arrange(date)  # Sort by air date
# Set episode factor levels in order of air date
episode_bars <- episode_bars %>%
mutate(episode = factor(episode, levels = episode))
# --- Step 3: Join air dates into all_segments for plotting ---
all_segments <- all_segments %>%
left_join(
episode_bars %>% select(episode, date),
by = "episode"
) %>%
arrange(date)
# --- Step 4: Create the faceted visualization ---
all_episodes_vis <- ggplot() +
# Draw the full episode bar (grey) for all episodes
geom_rect(
data = episode_bars,
aes(xmin = 0, xmax = episode_length_seconds, ymin = 0, ymax = 1, group = episode),
fill = "grey90", color = "black", size = 0.3
) +
# Add Trump segments
geom_rect(
data = filter(all_segments, candidate == "Trump"),
aes(xmin = start, xmax = end, ymin = 0.5, ymax = 1, group = episode),
fill = "red", alpha = 0.8
) +
# Add Harris segments
geom_rect(
data = filter(all_segments, candidate == "Harris"),
aes(xmin = start, xmax = end, ymin = 0, ymax = 0.5, group = episode),
fill = "blue", alpha = 0.8
) +
# Add tick marks for every minute and every 15 seconds
scale_x_continuous(
breaks = seq(0, max(episode_bars$episode_length_seconds), by = 60),
minor_breaks = seq(0, max(episode_bars$episode_length_seconds), by = 15),
labels = function(x) sprintf("%d:%02d", x %/% 60, x %% 60)
) +
# Facet by episode, in air-date order
facet_wrap(~ episode, ncol = 1, scales = "free_x") +
# Add labels and theme
labs(
title = "SNL Airtime Visualization for All Episodes",
subtitle = "Red: Trump Airtime | Blue: Harris Airtime",
x = "Time (minutes:seconds)",
y = NULL
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(face = "bold", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey80", size = 0.3),
panel.grid.minor.x = element_line(color = "grey90", size = 0.2),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(size = 10, color = "black")
)
# --- Step 5: Save the visualization ---
ggsave(
"snl_airtime_faceted_sorted_by_date_again_3pm.pdf",
all_episodes_vis,
width = 12,
height = 24,
limitsize = FALSE
)
# Optional: View first few episodes
head(episode_bars)
#Now we're moving onto topic analysis, we need to clean the data first
# Convert "run time (total)" from POSIXct to seconds and MM:SS, THIS IS BROKEN
snl_topics_processed <- snl_topics %>%
mutate(
# Extract minutes and seconds from the POSIXct object
episode_length_seconds = as.numeric(format(`run time (total)`, "%M")) * 60 +
as.numeric(format(`run time (total)`, "%S")),
# Format back to MM:SS for display
episode_length_formatted = sprintf("%d:%02d", floor(episode_length_seconds / 60), episode_length_seconds %% 60)
)
#I noticed that the episode length is reading in as a date: fixing so it's run time
str(snl_topics$`run time (total)`)
# step 1. make data quantifiable (ex. direct mentions = True, no direct mentions = False)
snl_topics_processed <- snl_topics %>%
mutate(across(
contains(c("reproductive", "immigration", "economics", "democracy")),
~ case_when(
str_detect(., regex("no (direct|mentions|statements)", ignore_case = TRUE)) ~ FALSE,
is.na(.) ~ NA,
TRUE ~ TRUE
),
.names = "mentioned_{.col}"
))
#coding on my own to create the heatmap data
snl_heatmap_data <- snl_topics_processed %>%
mutate(
economics = case_when(
`mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == FALSE ~ "Trump",
`mentioned_Trump Economics` == FALSE & `mentioned_Harris Economics` == TRUE ~ "Harris",
`mentioned_Trump Economics` == TRUE & `mentioned_Harris Economics` == TRUE ~ "Both",
TRUE ~ "None"  # Default case when neither is TRUE
),
reproductive_rights = case_when(
`mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == FALSE ~ "Trump",
`mentioned_Trump reproductive rights` == FALSE & `mentioned_Harris reproductive rights` == TRUE ~ "Harris",
`mentioned_Trump reproductive rights` == TRUE & `mentioned_Harris reproductive rights` == TRUE ~ "Both",
TRUE ~ "None"  # Default case when neither is TRUE
),
immigration = case_when(
`mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == FALSE ~ "Trump",
`mentioned_Trump immigration` == FALSE & `mentioned_Harris immigration` == TRUE ~ "Harris",
`mentioned_Trump immigration` == TRUE & `mentioned_Harris immigration` == TRUE ~ "Both",
TRUE ~ "None"  # Default case when neither is TRUE
),
democracy = case_when(
`mentioned_Trump Democracy` == TRUE & `mentioned_Harris Democracy` == FALSE ~ "Trump",
`mentioned_Trump Democracy` == FALSE & `mentioned_Harris Democracy` == TRUE ~ "Harris",
`mentioned_Trump Democracy` == TRUE & `mentioned_Harris Democracy` == TRUE ~ "Both",
TRUE ~ "None"  # Default case when neither is TRUE
)
) %>%
select(show, date, economics, reproductive_rights, immigration, democracy)
head(snl_heatmap_data)
# First, build labels like: 1 (Oct 01)
snl_heatmap_data <- snl_heatmap_data %>%
arrange(date) %>%
mutate(
ep_num = row_number(),
ep_label = paste0(ep_num, " (", format(date, "%b %d"), ")")
)
# Pivot to long format for plotting
heatmap_long <- snl_heatmap_data %>%
pivot_longer(
cols = c(economics, reproductive_rights, immigration, democracy),
names_to = "topic",
values_to = "mentioned_by"
)
# Color mapping
mention_colors <- c(
"Trump" = "red",
"Harris" = "blue",
"Both" = "purple",
"None" = "grey90"
)
# Build the heatmap
snl_heatmap_plot <- ggplot(heatmap_long, aes(x = factor(ep_label, levels = unique(snl_heatmap_data$ep_label)),
y = fct_rev(topic), fill = mentioned_by)) +
geom_tile(color = "white", linewidth = 0.5) +
scale_fill_manual(values = mention_colors, name = "Mentioned By") +
labs(
title = "SNL Mentions by Topic and Candidate",
x = "Episode Number (Air Date)",
y = "Topic"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
plot.background = element_rect(fill = "white", color = NA)
) +
geom_vline(
xintercept = which(snl_heatmap_data$date == as.Date("2024-11-05")),
linetype = "dashed", color = "black"
)
# Save the final version
ggsave("snl_heatmap_topics.png", plot = snl_heatmap_plot, width = 12, height = 6, dpi = 300)
# Read in data
LWT_airtime <- read_csv("data/LWT-airtime.csv")
LWT_topics <- read_excel("data/LWT-topics.xlsx")
summary(LWT_airtime)
# Add airtime calculations for LWT
LWT_airtime_processed <- LWT_airtime %>%
mutate(
# Calculate total airtime in seconds
total_trump_airtime_seconds = sapply(`trump air time stamps`, calculate_duration),
total_harris_airtime_seconds = sapply(`harris air time stamps`, calculate_duration),
# Convert to minutes for easier interpretation
total_trump_airtime_minutes = round(total_trump_airtime_seconds / 60, 2),
total_harris_airtime_minutes = round(total_harris_airtime_seconds / 60, 2)
)
)
